"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["resources_vue_components_Dashboard_CustomModal_vue"],{

/***/ "./node_modules/@coreui/vue/dist/index.es.js":
/*!***************************************************!*\
  !*** ./node_modules/@coreui/vue/dist/index.es.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CAccordion\": () => (/* binding */ CAccordion),\n/* harmony export */   \"CAccordionBody\": () => (/* binding */ CAccordionBody),\n/* harmony export */   \"CAccordionButton\": () => (/* binding */ CAccordionButton),\n/* harmony export */   \"CAccordionCollapse\": () => (/* binding */ CAccordionCollapse),\n/* harmony export */   \"CAccordionHeader\": () => (/* binding */ CAccordionHeader),\n/* harmony export */   \"CAccordionItem\": () => (/* binding */ CAccordionItem),\n/* harmony export */   \"CAccordionPlugin\": () => (/* binding */ CAccordionPlugin),\n/* harmony export */   \"CAlert\": () => (/* binding */ CAlert),\n/* harmony export */   \"CAlertHeading\": () => (/* binding */ CAlertHeading),\n/* harmony export */   \"CAlertLink\": () => (/* binding */ CAlertLink),\n/* harmony export */   \"CAlertPlugin\": () => (/* binding */ CAlertPlugin),\n/* harmony export */   \"CAvatar\": () => (/* binding */ CAvatar),\n/* harmony export */   \"CAvatarPlugin\": () => (/* binding */ CAvatarPlugin),\n/* harmony export */   \"CBackdrop\": () => (/* binding */ CBackdrop),\n/* harmony export */   \"CBackdropPlugin\": () => (/* binding */ CBackdropPlugin),\n/* harmony export */   \"CBadge\": () => (/* binding */ CBadge),\n/* harmony export */   \"CBadgePlugin\": () => (/* binding */ CBadgePlugin),\n/* harmony export */   \"CBreadcrumb\": () => (/* binding */ CBreadcrumb),\n/* harmony export */   \"CBreadcrumbItem\": () => (/* binding */ CBreadcrumbItem),\n/* harmony export */   \"CBreadcrumbPlugin\": () => (/* binding */ CBreadcrumbPlugin),\n/* harmony export */   \"CButton\": () => (/* binding */ CButton),\n/* harmony export */   \"CButtonGroup\": () => (/* binding */ CButtonGroup),\n/* harmony export */   \"CButtonGroupPlugin\": () => (/* binding */ CButtonGroupPlugin),\n/* harmony export */   \"CButtonPlugin\": () => (/* binding */ CButtonPlugin),\n/* harmony export */   \"CButtonToolbar\": () => (/* binding */ CButtonToolbar),\n/* harmony export */   \"CCLinkPlugin\": () => (/* binding */ CCLinkPlugin),\n/* harmony export */   \"CCallout\": () => (/* binding */ CCallout),\n/* harmony export */   \"CCalloutPlugin\": () => (/* binding */ CCalloutPlugin),\n/* harmony export */   \"CCard\": () => (/* binding */ CCard),\n/* harmony export */   \"CCardBody\": () => (/* binding */ CCardBody),\n/* harmony export */   \"CCardFooter\": () => (/* binding */ CCardFooter),\n/* harmony export */   \"CCardGroup\": () => (/* binding */ CCardGroup),\n/* harmony export */   \"CCardHeader\": () => (/* binding */ CCardHeader),\n/* harmony export */   \"CCardImage\": () => (/* binding */ CCardImage),\n/* harmony export */   \"CCardImageOverlay\": () => (/* binding */ CCardImageOverlay),\n/* harmony export */   \"CCardLink\": () => (/* binding */ CCardLink),\n/* harmony export */   \"CCardPlugin\": () => (/* binding */ CCardPlugin),\n/* harmony export */   \"CCardSubtitle\": () => (/* binding */ CCardSubtitle),\n/* harmony export */   \"CCardText\": () => (/* binding */ CCardText),\n/* harmony export */   \"CCardTitle\": () => (/* binding */ CCardTitle),\n/* harmony export */   \"CCarousel\": () => (/* binding */ CCarousel),\n/* harmony export */   \"CCarouselCaption\": () => (/* binding */ CCarouselCaption),\n/* harmony export */   \"CCarouselItem\": () => (/* binding */ CCarouselItem),\n/* harmony export */   \"CCarouselPlugin\": () => (/* binding */ CCarouselPlugin),\n/* harmony export */   \"CCloseButton\": () => (/* binding */ CCloseButton),\n/* harmony export */   \"CCloseButtonPlugin\": () => (/* binding */ CCloseButtonPlugin),\n/* harmony export */   \"CCol\": () => (/* binding */ CCol),\n/* harmony export */   \"CCollapse\": () => (/* binding */ CCollapse),\n/* harmony export */   \"CCollapsePlugin\": () => (/* binding */ CCollapsePlugin),\n/* harmony export */   \"CContainer\": () => (/* binding */ CContainer),\n/* harmony export */   \"CDropdown\": () => (/* binding */ CDropdown),\n/* harmony export */   \"CDropdownDivider\": () => (/* binding */ CDropdownDivider),\n/* harmony export */   \"CDropdownHeader\": () => (/* binding */ CDropdownHeader),\n/* harmony export */   \"CDropdownItem\": () => (/* binding */ CDropdownItem),\n/* harmony export */   \"CDropdownMenu\": () => (/* binding */ CDropdownMenu),\n/* harmony export */   \"CDropdownPlugin\": () => (/* binding */ CDropdownPlugin),\n/* harmony export */   \"CDropdownToggle\": () => (/* binding */ CDropdownToggle),\n/* harmony export */   \"CFooter\": () => (/* binding */ CFooter),\n/* harmony export */   \"CFooterPlugin\": () => (/* binding */ CFooterPlugin),\n/* harmony export */   \"CForm\": () => (/* binding */ CForm),\n/* harmony export */   \"CFormCheck\": () => (/* binding */ CFormCheck),\n/* harmony export */   \"CFormFeedback\": () => (/* binding */ CFormFeedback),\n/* harmony export */   \"CFormFloating\": () => (/* binding */ CFormFloating),\n/* harmony export */   \"CFormInput\": () => (/* binding */ CFormInput),\n/* harmony export */   \"CFormLabel\": () => (/* binding */ CFormLabel),\n/* harmony export */   \"CFormPlugin\": () => (/* binding */ CFormPlugin),\n/* harmony export */   \"CFormRange\": () => (/* binding */ CFormRange),\n/* harmony export */   \"CFormSelect\": () => (/* binding */ CFormSelect),\n/* harmony export */   \"CFormSwitch\": () => (/* binding */ CFormSwitch),\n/* harmony export */   \"CFormText\": () => (/* binding */ CFormText),\n/* harmony export */   \"CFormTextarea\": () => (/* binding */ CFormTextarea),\n/* harmony export */   \"CGridPlugin\": () => (/* binding */ CGridPlugin),\n/* harmony export */   \"CHeader\": () => (/* binding */ CHeader),\n/* harmony export */   \"CHeaderBrand\": () => (/* binding */ CHeaderBrand),\n/* harmony export */   \"CHeaderDivider\": () => (/* binding */ CHeaderDivider),\n/* harmony export */   \"CHeaderNav\": () => (/* binding */ CHeaderNav),\n/* harmony export */   \"CHeaderPlugin\": () => (/* binding */ CHeaderPlugin),\n/* harmony export */   \"CHeaderText\": () => (/* binding */ CHeaderText),\n/* harmony export */   \"CHeaderToggler\": () => (/* binding */ CHeaderToggler),\n/* harmony export */   \"CImage\": () => (/* binding */ CImage),\n/* harmony export */   \"CImagePlugin\": () => (/* binding */ CImagePlugin),\n/* harmony export */   \"CInputGroup\": () => (/* binding */ CInputGroup),\n/* harmony export */   \"CInputGroupText\": () => (/* binding */ CInputGroupText),\n/* harmony export */   \"CLink\": () => (/* binding */ CLink),\n/* harmony export */   \"CListGroup\": () => (/* binding */ CListGroup),\n/* harmony export */   \"CListGroupItem\": () => (/* binding */ CListGroupItem),\n/* harmony export */   \"CListGroupPlugin\": () => (/* binding */ CListGroupPlugin),\n/* harmony export */   \"CModal\": () => (/* binding */ CModal),\n/* harmony export */   \"CModalBody\": () => (/* binding */ CModalBody),\n/* harmony export */   \"CModalFooter\": () => (/* binding */ CModalFooter),\n/* harmony export */   \"CModalHeader\": () => (/* binding */ CModalHeader),\n/* harmony export */   \"CModalPlugin\": () => (/* binding */ CModalPlugin),\n/* harmony export */   \"CModalTitle\": () => (/* binding */ CModalTitle),\n/* harmony export */   \"CNav\": () => (/* binding */ CNav),\n/* harmony export */   \"CNavGroup\": () => (/* binding */ CNavGroup),\n/* harmony export */   \"CNavGroupItems\": () => (/* binding */ CNavGroupItems),\n/* harmony export */   \"CNavItem\": () => (/* binding */ CNavItem),\n/* harmony export */   \"CNavLink\": () => (/* binding */ CNavLink),\n/* harmony export */   \"CNavPlugin\": () => (/* binding */ CNavPlugin),\n/* harmony export */   \"CNavTitle\": () => (/* binding */ CNavTitle),\n/* harmony export */   \"CNavbar\": () => (/* binding */ CNavbar),\n/* harmony export */   \"CNavbarBrand\": () => (/* binding */ CNavbarBrand),\n/* harmony export */   \"CNavbarNav\": () => (/* binding */ CNavbarNav),\n/* harmony export */   \"CNavbarPlugin\": () => (/* binding */ CNavbarPlugin),\n/* harmony export */   \"CNavbarText\": () => (/* binding */ CNavbarText),\n/* harmony export */   \"CNavbarToggler\": () => (/* binding */ CNavbarToggler),\n/* harmony export */   \"COffcanvas\": () => (/* binding */ COffcanvas),\n/* harmony export */   \"COffcanvasBody\": () => (/* binding */ COffcanvasBody),\n/* harmony export */   \"COffcanvasHeader\": () => (/* binding */ COffcanvasHeader),\n/* harmony export */   \"COffcanvasPlugin\": () => (/* binding */ COffcanvasPlugin),\n/* harmony export */   \"COffcanvasTitle\": () => (/* binding */ COffcanvasTitle),\n/* harmony export */   \"CPagination\": () => (/* binding */ CPagination),\n/* harmony export */   \"CPaginationItem\": () => (/* binding */ CPaginationItem),\n/* harmony export */   \"CPaginationPlugin\": () => (/* binding */ CPaginationPlugin),\n/* harmony export */   \"CPlaceholder\": () => (/* binding */ CPlaceholder),\n/* harmony export */   \"CPlaceholderPlugin\": () => (/* binding */ CPlaceholderPlugin),\n/* harmony export */   \"CPopover\": () => (/* binding */ CPopover),\n/* harmony export */   \"CPopoverPlugin\": () => (/* binding */ CPopoverPlugin),\n/* harmony export */   \"CProgress\": () => (/* binding */ CProgress),\n/* harmony export */   \"CProgressBar\": () => (/* binding */ CProgressBar),\n/* harmony export */   \"CProgressPlugin\": () => (/* binding */ CProgressPlugin),\n/* harmony export */   \"CRow\": () => (/* binding */ CRow),\n/* harmony export */   \"CSidebar\": () => (/* binding */ CSidebar),\n/* harmony export */   \"CSidebarBrand\": () => (/* binding */ CSidebarBrand),\n/* harmony export */   \"CSidebarFooter\": () => (/* binding */ CSidebarFooter),\n/* harmony export */   \"CSidebarHeader\": () => (/* binding */ CSidebarHeader),\n/* harmony export */   \"CSidebarNav\": () => (/* binding */ CSidebarNav),\n/* harmony export */   \"CSidebarPlugin\": () => (/* binding */ CSidebarPlugin),\n/* harmony export */   \"CSidebarToggler\": () => (/* binding */ CSidebarToggler),\n/* harmony export */   \"CSpinner\": () => (/* binding */ CSpinner),\n/* harmony export */   \"CSpinnerPlugin\": () => (/* binding */ CSpinnerPlugin),\n/* harmony export */   \"CTabContent\": () => (/* binding */ CTabContent),\n/* harmony export */   \"CTabPane\": () => (/* binding */ CTabPane),\n/* harmony export */   \"CTable\": () => (/* binding */ CTable),\n/* harmony export */   \"CTableBody\": () => (/* binding */ CTableBody),\n/* harmony export */   \"CTableCaption\": () => (/* binding */ CTableCaption),\n/* harmony export */   \"CTableDataCell\": () => (/* binding */ CTableDataCell),\n/* harmony export */   \"CTableFoot\": () => (/* binding */ CTableFoot),\n/* harmony export */   \"CTableHead\": () => (/* binding */ CTableHead),\n/* harmony export */   \"CTableHeaderCell\": () => (/* binding */ CTableHeaderCell),\n/* harmony export */   \"CTablePlugin\": () => (/* binding */ CTablePlugin),\n/* harmony export */   \"CTableRow\": () => (/* binding */ CTableRow),\n/* harmony export */   \"CTabsPlugin\": () => (/* binding */ CTabsPlugin),\n/* harmony export */   \"CToast\": () => (/* binding */ CToast),\n/* harmony export */   \"CToastBody\": () => (/* binding */ CToastBody),\n/* harmony export */   \"CToastClose\": () => (/* binding */ CToastClose),\n/* harmony export */   \"CToastHeader\": () => (/* binding */ CToastHeader),\n/* harmony export */   \"CToastPlugin\": () => (/* binding */ CToastPlugin),\n/* harmony export */   \"CToaster\": () => (/* binding */ CToaster),\n/* harmony export */   \"CTooltip\": () => (/* binding */ CTooltip),\n/* harmony export */   \"CTooltipPlugin\": () => (/* binding */ CTooltipPlugin),\n/* harmony export */   \"CWidgetStatsA\": () => (/* binding */ CWidgetStatsA),\n/* harmony export */   \"CWidgetStatsB\": () => (/* binding */ CWidgetStatsB),\n/* harmony export */   \"CWidgetStatsC\": () => (/* binding */ CWidgetStatsC),\n/* harmony export */   \"CWidgetStatsD\": () => (/* binding */ CWidgetStatsD),\n/* harmony export */   \"CWidgetStatsE\": () => (/* binding */ CWidgetStatsE),\n/* harmony export */   \"CWidgetStatsF\": () => (/* binding */ CWidgetStatsF),\n/* harmony export */   \"CWidgetsStatsPlugin\": () => (/* binding */ CWidgetsStatsPlugin),\n/* harmony export */   \"default\": () => (/* binding */ CoreuiVue),\n/* harmony export */   \"vcplaceholder\": () => (/* binding */ vcplaceholder),\n/* harmony export */   \"vcpopover\": () => (/* binding */ vcpopover),\n/* harmony export */   \"vctooltip\": () => (/* binding */ vctooltip)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\n\nconst CAccordion = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordion',\n    props: {\n        /**\n         * The active item key.\n         */\n        activeItemKey: {\n            type: [Number, String],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Make accordion items stay open when another item is opened\n         */\n        alwaysOpen: Boolean,\n        /**\n         * Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\n         */\n        flush: Boolean,\n    },\n    setup(props, { slots }) {\n        const activeItemKey = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.activeItemKey);\n        const setActiveItemKey = (key) => {\n            activeItemKey.value = key;\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('activeItemKey', activeItemKey);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('alwaysOpen', props.alwaysOpen);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('setActiveItemKey', setActiveItemKey);\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['accordion', { ['accordion-flush']: props.flush }] }, slots.default && slots.default());\n    },\n});\n\nconst vVisible = {\n    beforeMount(el, { value }, { transition }) {\n        el._vod = el.style.display === 'none' ? '' : el.style.display;\n        if (transition && value) {\n            transition.beforeEnter(el);\n        }\n    },\n    mounted(el, { value }, { transition }) {\n        if (transition && value) {\n            transition.enter(el);\n        }\n    },\n    updated(el, { value, oldValue }, { transition }) {\n        if (!value === !oldValue)\n            return;\n        if (transition) {\n            if (value) {\n                transition.beforeEnter(el);\n                transition.enter(el);\n            }\n            else {\n                transition.leave(el, () => {\n                    // setDisplay(el, false)\n                });\n            }\n        }\n    },\n};\n\nconst execute = (callback) => {\n    if (typeof callback === 'function') {\n        callback();\n    }\n};\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n    if (!waitForTransition) {\n        execute(callback);\n        return;\n    }\n    const durationPadding = 5;\n    const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n    let called = false;\n    const handler = ({ target }) => {\n        if (target !== transitionElement) {\n            return;\n        }\n        called = true;\n        transitionElement.removeEventListener('transitionend', handler);\n        execute(callback);\n    };\n    transitionElement.addEventListener('transitionend', handler);\n    setTimeout(() => {\n        if (!called) {\n            triggerTransitionEnd(transitionElement);\n        }\n    }, emulatedDuration);\n};\nconst getTransitionDurationFromElement = (element) => {\n    if (!element) {\n        return 0;\n    }\n    // Get transition-duration of the element\n    let { transitionDuration, transitionDelay } = window.getComputedStyle(element);\n    const floatTransitionDuration = Number.parseFloat(transitionDuration);\n    const floatTransitionDelay = Number.parseFloat(transitionDelay);\n    // Return 0 if element or transition duration is not found\n    if (!floatTransitionDuration && !floatTransitionDelay) {\n        return 0;\n    }\n    // If multiple durations are defined, take the first\n    transitionDuration = transitionDuration.split(',')[0];\n    transitionDelay = transitionDelay.split(',')[0];\n    return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000;\n};\nconst triggerTransitionEnd = (element) => {\n    element.dispatchEvent(new Event('transitionend'));\n};\n\nconst CCollapse = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCollapse',\n    props: {\n        /**\n         * Set horizontal collapsing to transition the width instead of height.\n         */\n        horizontal: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Toggle the visibility of component.\n         */\n        visible: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const collapsing = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n        const show = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        const handleBeforeEnter = () => {\n            collapsing.value = true;\n        };\n        const handleEnter = (el, done) => {\n            emit('show');\n            // collapsing.value = true\n            setTimeout(() => {\n                executeAfterTransition(() => done(), el);\n                if (props.horizontal) {\n                    el.style.width = `${el.scrollWidth}px`;\n                    return;\n                }\n                el.style.height = `${el.scrollHeight}px`;\n            }, 1);\n        };\n        const handleAfterEnter = (el) => {\n            show.value = true;\n            collapsing.value = false;\n            props.horizontal ? el.style.removeProperty('width') : el.style.removeProperty('height');\n        };\n        const handleBeforeLeave = (el) => {\n            collapsing.value = true;\n            show.value = false;\n            if (props.horizontal) {\n                el.style.width = `${el.scrollWidth}px`;\n                return;\n            }\n            el.style.height = `${el.scrollHeight}px`;\n        };\n        const handleLeave = (el, done) => {\n            emit('hide');\n            setTimeout(() => {\n                executeAfterTransition(() => done(), el);\n                if (props.horizontal) {\n                    el.style.width = '0px';\n                    return;\n                }\n                el.style.height = '0px';\n            }, 1);\n        };\n        const handleAfterLeave = (el) => {\n            collapsing.value = false;\n            props.horizontal ? el.style.removeProperty('width') : el.style.removeProperty('height');\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n            css: false,\n            onBeforeEnter: () => handleBeforeEnter(),\n            onEnter: (el, done) => handleEnter(el, done),\n            onAfterEnter: (el) => handleAfterEnter(el),\n            onBeforeLeave: (el) => handleBeforeLeave(el),\n            onLeave: (el, done) => handleLeave(el, done),\n            onAfterLeave: (el) => handleAfterLeave(el),\n        }, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                collapsing.value ? 'collapsing' : 'collapse',\n                { 'collapse-horizontal': props.horizontal, show: show.value },\n            ],\n        }, slots.default && slots.default()), [[vVisible, props.visible]]));\n    },\n});\n\nconst CAccordionBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordionBody',\n    setup(_, { slots }) {\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('visible');\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCollapse, { class: 'accordion-collapse', visible: visible.value }, {\n            default: () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['accordion-body'] }, slots.default && slots.default()),\n        });\n    },\n});\n\nconst CAccordionButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordionButton',\n    setup(_, { slots }) {\n        const toggleVisibility = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('toggleVisibility');\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('visible');\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n            type: 'button',\n            'aria-expanded': !visible.value,\n            class: ['accordion-button', { ['collapsed']: !visible.value }],\n            onClick: () => toggleVisibility(),\n        }, slots.default && slots.default());\n    },\n});\n\nconst CAccordionCollapse = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordionCollapse',\n    props: {\n        /**\n         * Toggle the visibility of component.\n         */\n        visible: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCollapse, {\n            class: 'accordion-collapse',\n            visible: props.visible,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CAccordionHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordionHeader',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['accordion-header'] }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CAccordionButton, {}, {\n            default: () => slots.default && slots.default(),\n        }));\n    },\n});\n\nconst CAccordionItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAccordionItem',\n    props: {\n        /**\n         * The item key.\n         */\n        itemKey: {\n            type: [Number, String],\n            default: undefined,\n            require: false,\n        },\n    },\n    setup(props, { slots }) {\n        const activeItemKey = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('activeItemKey');\n        const alwaysOpen = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('alwaysOpen');\n        // eslint-disable-next-line no-unused-vars\n        const setActiveItemKey = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('setActiveItemKey');\n        const itemKey = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.itemKey ? props.itemKey : Math.random().toString(36).substr(2, 9));\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(Boolean(activeItemKey.value === itemKey.value));\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(activeItemKey, () => (visible.value = Boolean(activeItemKey.value === itemKey.value)));\n        const toggleVisibility = () => {\n            visible.value = !visible.value;\n            !alwaysOpen && visible && setActiveItemKey(itemKey.value);\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('visible', visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('toggleVisibility', toggleVisibility);\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['accordion-item'] }, slots.default && slots.default());\n    },\n});\n\nconst CAccordionPlugin = {\n    install: (app) => {\n        app.component(CAccordion.name, CAccordion);\n        app.component(CAccordionBody.name, CAccordionBody);\n        app.component(CAccordionButton.name, CAccordionButton);\n        app.component(CAccordionCollapse.name, CAccordionCollapse);\n        app.component(CAccordionHeader.name, CAccordionHeader);\n        app.component(CAccordionItem.name, CAccordionItem);\n    },\n};\n\nconst Shape = {\n    type: String,\n    validator: (value) => {\n        // The value must match one of these strings\n        return [\n            'rounded',\n            'rounded-top',\n            'rounded-end',\n            'rounded-bottom',\n            'rounded-start',\n            'rounded-circle',\n            'rounded-pill',\n            'rounded-0',\n            'rounded-1',\n            'rounded-2',\n            'rounded-3',\n        ].includes(value);\n    },\n};\nconst Color = {\n    type: String,\n    validator: (value) => {\n        // The value must match one of these strings\n        return [\n            'primary',\n            'secondary',\n            'success',\n            'danger',\n            'warning',\n            'info',\n            'dark',\n            'light',\n            'link',\n            'transparent',\n        ].includes(value);\n    },\n};\nconst TextColor = {\n    type: String,\n    validator: (value) => {\n        return [\n            'primary',\n            'secondary',\n            'success',\n            'danger',\n            'warning',\n            'info',\n            'dark',\n            'light',\n            'white',\n            'muted',\n            'high-emphasis',\n            'medium-emphasis',\n            'disabled',\n            'high-emphasis-inverse',\n            'medium-emphasis-inverse',\n            'disabled-inverse',\n        ].includes(value);\n    },\n};\n\nconst CCloseButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCloseButton',\n    props: {\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Change the default color to white.\n         */\n        white: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Event called when the user clicks on the component.\n         */\n        'click',\n    ],\n    setup(props, { emit }) {\n        const handleClick = () => {\n            if (props.disabled) {\n                return;\n            }\n            emit('click');\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n            class: [\n                'btn',\n                'btn-close',\n                {\n                    ['btn-close-white']: props.white,\n                },\n                props.disabled,\n            ],\n            'aria-label': 'Close',\n            disabled: props.disabled,\n            onClick: handleClick,\n        });\n    },\n});\n\nconst CAlert = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAlert',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Optionally add a close button to alert and allow it to self dismisss.\n         */\n        dismissible: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        /**\n         * Set the alert variant to a solid.\n         *\n         * @values 'solid'\n         */\n        variant: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return value === 'solid';\n            },\n        },\n        /**\n         * Toggle the visibility of alert component.\n         */\n        visible: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be closed.\n         */\n        'close',\n    ],\n    setup(props, { slots, emit }) {\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => {\n            visible.value = props.visible;\n        });\n        const handleDismiss = () => {\n            visible.value = false;\n            emit('close');\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n            name: 'fade',\n            duration: 350,\n            enterFromClass: '',\n            enterActiveClass: 'fade',\n            enterToClass: 'fade show',\n            leaveActiveClass: 'fade',\n        }, {\n            default: () => visible.value &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: [\n                        'alert',\n                        props.variant === 'solid'\n                            ? `bg-${props.color} text-white border-0`\n                            : `alert-${props.color}`,\n                        {\n                            [`alert-${props.color}`]: props.color,\n                            'alert-dismissible': props.dismissible,\n                        },\n                    ],\n                }, [\n                    slots.default && slots.default(),\n                    props.dismissible &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCloseButton, {\n                            onClick: () => {\n                                handleDismiss();\n                            },\n                        }),\n                ]),\n        });\n    },\n});\n\nconst CAlertHeading = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAlertHeading',\n    props: {\n        /**\n         * \tComponent used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'h4',\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: 'alert-heading',\n        }, slots);\n    },\n});\n\nconst CAlertLink = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAlertLink',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('a', {\n            class: 'alert-link',\n        }, slots);\n    },\n});\n\nconst CAlertPlugin = {\n    install: (app) => {\n        app.component(CAlert.name, CAlert);\n        app.component(CAlertHeading.name, CAlertHeading);\n        app.component(CAlertLink.name, CAlertLink);\n    },\n};\n\nconst CAvatar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CAvatar',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Select the shape of the component.\n         *\n         * @values 'rounded', 'rounded-top', 'rounded-end', 'rounded-bottom', 'rounded-start', 'rounded-circle', 'rounded-pill', 'rounded-0', 'rounded-1', 'rounded-2', 'rounded-3'\n         */\n        shape: Shape,\n        /**\n         * Size the component small, large, or extra large.\n         *\n         * @values 'sm', 'md', 'lg', 'xl'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'md', 'lg', 'xl'].includes(value);\n            },\n        },\n        /**\n         * The src attribute for the img element.\n         */\n        src: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Sets the color context of the status indicator to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        status: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return [\n                    'primary',\n                    'secondary',\n                    'success',\n                    'danger',\n                    'warning',\n                    'info',\n                    'dark',\n                    'light',\n                ].includes(value);\n            },\n        },\n        /**\n         * Sets the text color of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'white', 'muted', 'high-emphasis', 'medium-emphasis', 'disabled', 'high-emphasis-inverse', 'medium-emphasis-inverse', 'disabled-inverse'\n         */\n        textColor: TextColor,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'avatar',\n                {\n                    [`bg-${props.color}`]: props.color,\n                    [`avatar-${props.size}`]: props.size,\n                    [`text-${props.textColor}`]: props.textColor,\n                },\n                `${props.shape}`,\n            ],\n        }, [\n            props.src\n                ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('img', { src: props.src, class: 'avatar-img' })\n                : slots.default && slots.default(),\n            props.status && (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: ['avatar-status', `bg-${props.status}`] }),\n        ]);\n    },\n});\n\nconst CAvatarPlugin = {\n    install: (app) => {\n        app.component(CAvatar.name, CAvatar);\n    },\n};\n\nconst CBackdrop = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CBackdrop',\n    props: {\n        /**\n         * Toggle the visibility of modal component.\n         */\n        visible: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n    },\n    setup(props) {\n        const handleBeforeEnter = (el) => {\n            el.classList.remove('d-none');\n        };\n        const handleEnter = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            setTimeout(() => {\n                el.style.visibility = 'visible';\n                el.classList.add('show');\n            }, 1);\n        };\n        const handleLeave = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            el.classList.remove('show');\n        };\n        const handleAfterLeave = (el) => {\n            el.classList.add('d-none');\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n            onBeforeEnter: (el) => handleBeforeEnter(el),\n            onEnter: (el, done) => handleEnter(el, done),\n            onLeave: (el, done) => handleLeave(el, done),\n            onAfterLeave: (el) => handleAfterLeave(el),\n        }, () => props.visible &&\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                class: 'fade',\n            }));\n    },\n});\n\nconst CBackdropPlugin = {\n    install: (app) => {\n        app.component(CBackdrop.name, CBackdrop);\n    },\n};\n\nconst CBadge = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CBadge',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'span',\n        },\n        /**\n         * Position badge in one of the corners of a link or button.\n         *\n         * @values 'top-start', 'top-end', 'bottom-end', 'bottom-start'\n         */\n        position: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['top-start', 'top-end', 'bottom-end', 'bottom-start'].includes(value);\n            },\n        },\n        /**\n         * Select the shape of the component.\n         *\n         * @values 'rounded', 'rounded-top', 'rounded-end', 'rounded-bottom', 'rounded-start', 'rounded-circle', 'rounded-pill', 'rounded-0', 'rounded-1', 'rounded-2', 'rounded-3'\n         */\n        shape: Shape,\n        /**\n         * Size the component small.\n         *\n         * @values 'sm'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return value === 'sm';\n            },\n        },\n        /**\n         * Sets the text color of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'white', 'muted', 'high-emphasis', 'medium-emphasis', 'disabled', 'high-emphasis-inverse', 'medium-emphasis-inverse', 'disabled-inverse'\n         */\n        textColor: TextColor,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'badge',\n                {\n                    [`bg-${props.color}`]: props.color,\n                    'position-absolute translate-middle': props.position,\n                    'top-0': props.position && props.position.includes('top'),\n                    'top-100': props.position && props.position.includes('bottom'),\n                    'start-100': props.position && props.position.includes('end'),\n                    'start-0': props.position && props.position.includes('start'),\n                    [`badge-${props.size}`]: props.size,\n                    [`text-${props.textColor}`]: props.textColor,\n                },\n                props.shape,\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CBadgePlugin = {\n    install: (app) => {\n        app.component(CBadge.name, CBadge);\n    },\n};\n\nconst CBreadcrumbItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CBreadcrumbItem',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * The `href` attribute for the inner link component.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {\n            class: [\n                'breadcrumb-item',\n                {\n                    active: props.active,\n                },\n            ],\n            ...(props.active && { 'aria-current': 'page' }),\n        }, props.href\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('a', { href: props.href }, slots.default && slots.default())\n            : slots.default && slots.default());\n    },\n});\n\nconst CBreadcrumb = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CBreadcrumb',\n    setup(_, { slots, attrs }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('nav', {\n            'aria-label': 'breadcrumb',\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ol', { class: ['breadcrumb', attrs.class] }, slots.default && slots.default()));\n    },\n});\n\nconst CBreadcrumbPlugin = {\n    install: (app) => {\n        app.component(CBreadcrumb.name, CBreadcrumb);\n        app.component(CBreadcrumbItem.name, CBreadcrumbItem);\n    },\n};\n\nconst CButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CButton',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'button',\n            required: false,\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Select the shape of the component.\n         *\n         * @values 'rounded', 'rounded-top', 'rounded-end', 'rounded-bottom', 'rounded-start', 'rounded-circle', 'rounded-pill', 'rounded-0', 'rounded-1', 'rounded-2', 'rounded-3'\n         */\n        shape: Shape,\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * Specifies the type of button. Always specify the type attribute for the `<button>` element.\n         * Different browsers may use different default types for the `<button>` element.\n         *\n         * @values 'button', 'submit', 'reset'\n         */\n        type: {\n            type: String,\n            default: 'button',\n            required: false,\n            validator: (value) => {\n                return ['button', 'submit', 'reset'].includes(value);\n            },\n        },\n        /**\n         * Set the button variant to an outlined button or a ghost button.\n         *\n         * @values 'ghost', 'outline'\n         */\n        variant: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['ghost', 'outline'].includes(value);\n            },\n        },\n    },\n    emits: [\n        /**\n         * Event called when the user clicks on the button.\n         */\n        'click',\n    ],\n    setup(props, { emit, slots }) {\n        const handleClick = (event) => {\n            if (props.disabled) {\n                return;\n            }\n            emit('click', event);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'btn',\n                props.variant ? `btn-${props.variant}-${props.color}` : `btn-${props.color}`,\n                {\n                    [`btn-${props.size}`]: props.size,\n                    active: props.active,\n                    disabled: props.disabled,\n                },\n                props.shape,\n            ],\n            disabled: props.disabled && props.component !== 'a',\n            ...(props.component === 'a' && props.disabled && { 'aria-disabled': true, tabIndex: -1 }),\n            ...(props.component === 'a' && props.href && { href: props.href }),\n            ...(props.component === 'button' && { type: props.type }),\n            onClick: handleClick,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CButtonPlugin = {\n    install: (app) => {\n        app.component(CButton.name, CButton);\n    },\n};\n\nconst CButtonToolbar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CButtonToolbar',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'btn-toolbar' }, slots.default && slots.default());\n    },\n});\n\nconst CButtonGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CButtonGroup',\n    props: {\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * Create a set of buttons that appear vertically stacked rather than horizontally. Split button dropdowns are not supported here.\n         */\n        vertical: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                props.vertical ? 'btn-group-vertical' : 'btn-group',\n                { [`btn-group-${props.size}`]: props.size },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CButtonGroupPlugin = {\n    install: (app) => {\n        app.component(CButtonToolbar.name, CButtonToolbar);\n        app.component(CButtonGroup.name, CButtonGroup);\n    },\n};\n\nconst CCallout = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCallout',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'callout',\n                {\n                    [`callout-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCalloutPlugin = {\n    install: (app) => {\n        app.component(CCallout.name, CCallout);\n    },\n};\n\nconst CCard = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCard',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Sets the text color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', 'white', 'muted', 'high-emphasis', 'medium-emphasis', 'disabled', 'high-emphasis-inverse', 'medium-emphasis-inverse', 'disabled-inverse'\n         */\n        textColor: TextColor,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'card',\n                {\n                    [`bg-${props.color}`]: props.color,\n                    [`text-${props.textColor}`]: props.textColor,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCardBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardBody',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'card-body' }, slots.default && slots.default());\n    },\n});\n\nconst CCardFooter = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardFooter',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'card-footer' }, slots.default && slots.default());\n    },\n});\n\nconst CCardGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardGroup',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'card-group' }, slots.default && slots.default());\n    },\n});\n\nconst CCardHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardHeader',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'div',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'card-header' }, slots.default && slots.default());\n    },\n});\n\nconst CCardImage = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardImage',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'img',\n        },\n        /**\n         * Optionally orientate the image to the top, bottom.\n         *\n         * @values 'top', 'bottom'\n         */\n        orientation: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['top', 'bottom'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: `card-img${props.orientation ? `-${props.orientation}` : ''}`,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCardImageOverlay = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardImageOverlay',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'card-img-overlay' }, slots.default && slots.default());\n    },\n});\n\nconst CLink = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CLink',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'a',\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Event called when the user clicks on the component.\n         */\n        'click',\n    ],\n    setup(props, { slots, emit }) {\n        const handleClick = () => {\n            emit('click', props.href);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [{ active: props.active, disabled: props.disabled }],\n            ...(props.active && { 'aria-current': 'page' }),\n            ...(props.component === 'a' && props.disabled && { 'aria-disabled': true, tabIndex: -1 }),\n            ...((props.component === 'a' || props.component === 'button') && {\n                onClick: handleClick,\n            }),\n            href: props.href,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCLinkPlugin = {\n    install: (app) => {\n        app.component(CLink.name, CLink);\n    },\n};\n\nconst CCardLink = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardLink',\n    props: {\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: '#',\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CLink, { class: 'card-link', href: props.href }, { default: () => slots.default && slots.default() });\n    },\n});\n\nconst CCardSubtitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardSubtitle',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'h6',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'card-subtitle' }, slots.default && slots.default());\n    },\n});\n\nconst CCardText = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardText',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'p',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'card-text' }, slots.default && slots.default());\n    },\n});\n\nconst CCardTitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCardTitle',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'h5',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'card-title' }, slots.default && slots.default());\n    },\n});\n\nconst CCardPlugin = {\n    install: (app) => {\n        app.component(CCard.name, CCard);\n        app.component(CCardBody.name, CCardBody);\n        app.component(CCardFooter.name, CCardFooter);\n        app.component(CCardGroup.name, CCardGroup);\n        app.component(CCardHeader.name, CCardHeader);\n        app.component(CCardImage.name, CCardImage);\n        app.component(CCardImageOverlay.name, CCardImageOverlay);\n        app.component(CCardLink.name, CCardLink);\n        app.component(CCardSubtitle.name, CCardSubtitle);\n        app.component(CCardText.name, CCardText);\n        app.component(CCardTitle.name, CCardTitle);\n    },\n};\n\nconst isVisible$1 = (element) => {\n    const rect = element.getBoundingClientRect();\n    return (rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n};\nconst CCarousel = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCarousel',\n    props: {\n        /**\n         * Adding in the previous and next controls.\n         */\n        controls: Boolean,\n        /**\n         * Add darker controls, indicators, and captions.\n         */\n        dark: Boolean,\n        /**\n         * index of the active item.\n         */\n        index: {\n            type: Number,\n            default: 0,\n            required: false,\n        },\n        /**\n         * Adding indicators at the bottom of the carousel for each item.\n         */\n        indicators: Boolean,\n        /**\n         * The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.\n         */\n        interval: {\n            type: [Boolean, Number],\n            default: 5000,\n            required: false,\n        },\n        /**\n         * If set to 'hover', pauses the cycling of the carousel on mouseenter and resumes the cycling of the carousel on mouseleave. If set to false, hovering over the carousel won't pause it.\n         */\n        pause: {\n            type: [Boolean, String],\n            default: 'hover',\n            required: false,\n            validator: (value) => {\n                return typeof value === 'boolean' || value === 'hover';\n            },\n        },\n        /**\n         * Set type of the transition.\n         *\n         * @values 'crossfade', 'slide'\n         */\n        transition: {\n            type: String,\n            default: 'slide',\n            required: false,\n            validator: (value) => {\n                return ['crossfade', 'slide'].includes(value);\n            },\n        },\n        /**\n         * Set whether the carousel should cycle continuously or have hard stops.\n         */\n        wrap: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        const carouselRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const timeout = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const animating = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(false);\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const customInterval = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.interval);\n        const setAnimating = (value) => {\n            animating.value = value;\n        };\n        const setCustomInterval = (value) => {\n            customInterval.value = value;\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('setAnimating', setAnimating);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('setCustomInterval', setCustomInterval);\n        const pause = () => timeout.value && clearInterval(timeout.value);\n        const cycle = () => {\n            pause();\n            if (typeof props.interval === 'number') {\n                timeout.value = setTimeout(() => nextItemWhenVisible(), typeof customInterval.value === 'number' ? customInterval.value : props.interval);\n            }\n        };\n        const state = (0,vue__WEBPACK_IMPORTED_MODULE_0__.reactive)({\n            items: [],\n            active: props.index,\n            direction: 'next',\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeMount)(() => {\n            if (slots.default) {\n                // @ts-expect-error TODO: fix types\n                state.items = slots.default().filter((child) => child.type.name === 'CCarouselItem');\n            }\n        });\n        const handleControlClick = (direction) => {\n            if (animating.value) {\n                return;\n            }\n            state.direction = direction;\n            if (direction === 'next') {\n                state.active === state.items.length - 1 ? (state.active = 0) : state.active++;\n            }\n            else {\n                state.active === 0 ? (state.active = state.items.length - 1) : state.active--;\n            }\n        };\n        const nextItemWhenVisible = () => {\n            // Don't call next when the page isn't visible\n            // or the carousel or its parent isn't visible\n            if (!document.hidden && isVisible$1(carouselRef.value)) {\n                handleControlClick('next');\n            }\n        };\n        const handleIndicatorClick = (index) => {\n            if (state.active === index) {\n                return;\n            }\n            if (state.active < index) {\n                state.direction = 'next';\n                state.active = index;\n                return;\n            }\n            if (state.active > index) {\n                state.direction = 'prev';\n                state.active = index;\n            }\n        };\n        const handleScroll = () => {\n            if (!document.hidden && isVisible$1(carouselRef.value)) {\n                visible.value = true;\n            }\n            else {\n                visible.value = false;\n            }\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            window.addEventListener('scroll', handleScroll);\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(animating, () => {\n                if (props.wrap) {\n                    !animating.value && cycle();\n                    return;\n                }\n                if (!props.wrap && state.active < state.items.length - 1) {\n                    !animating.value && cycle();\n                }\n            });\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(visible, () => {\n            visible.value && cycle();\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'carousel slide',\n                props.transition === 'crossfade' && 'carousel-fade',\n                props.dark && 'carousel-dark',\n            ],\n            onmouseover: () => props.pause && pause(),\n            onmouseleave: () => cycle(),\n            ref: carouselRef,\n        }, [\n            props.indicators &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'carousel-indicators',\n                }, state.items.map((_, index) => {\n                    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n                        type: 'button',\n                        id: index,\n                        'data-coreui-target': '',\n                        ...(state.active === index && { class: 'active' }),\n                        onClick: () => handleIndicatorClick(index),\n                    });\n                })),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'carousel-inner' }, state.items.map((item, index) => {\n                return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(item, {\n                    active: state.active === index ? true : false,\n                    direction: state.direction,\n                });\n            })),\n            props.controls && [\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n                    type: 'button',\n                    class: 'carousel-control-prev',\n                    'data-coreui-target': '',\n                    onClick: () => handleControlClick('prev'),\n                }, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'carousel-control-prev-icon', ariaHidden: 'true' }),\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'visually-hidden' }, 'Previous'),\n                ]),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n                    type: 'button',\n                    class: 'carousel-control-next',\n                    'data-coreui-target': '',\n                    onClick: () => handleControlClick('next'),\n                }, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'carousel-control-next-icon', ariaHidden: 'true' }),\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'visually-hidden' }, 'Next'),\n                ]),\n            ],\n        ]);\n    },\n});\n\nconst CCarouselCaption = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCarouselCaption',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: 'carousel-caption',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCarouselItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCarouselItem',\n    props: {\n        /**\n         * @ignore\n         */\n        active: {\n            type: Boolean,\n            default: false,\n        },\n        /**\n         * @ignore\n         */\n        direction: {\n            type: String,\n            default: 'next',\n            required: false,\n        },\n        /**\n         * The amount of time to delay between automatically cycling an item.\n         */\n        interval: {\n            type: [Boolean, Number],\n            default: false,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        const carouselItemRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const { active } = (0,vue__WEBPACK_IMPORTED_MODULE_0__.toRefs)(props);\n        const directionClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const orderClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const activeClassName = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(active.value && 'active');\n        // eslint-disable-next-line no-unused-vars\n        const setAnimating = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('setAnimating');\n        // eslint-disable-next-line no-unused-vars\n        const setCustomInterval = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('setCustomInterval');\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(active, (active, prevActive) => {\n            active && setCustomInterval(props.interval);\n            if (!prevActive && active) {\n                orderClassName.value = `carousel-item-${props.direction}`;\n                setCustomInterval(props.interval);\n            }\n            setTimeout(() => {\n                if (prevActive && !active) {\n                    activeClassName.value = 'active';\n                }\n                directionClassName.value = `carousel-item-${props.direction === 'next' ? 'start' : 'end'}`;\n            }, 0);\n            carouselItemRef.value.addEventListener('transitionstart', () => {\n                setAnimating(true);\n            });\n            carouselItemRef.value.addEventListener('transitionend', () => {\n                setAnimating(false);\n                if (active) {\n                    directionClassName.value = '';\n                    orderClassName.value = '';\n                    activeClassName.value = 'active';\n                }\n                if (!active) {\n                    directionClassName.value = '';\n                    orderClassName.value = '';\n                    activeClassName.value = '';\n                }\n            });\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'carousel-item',\n                activeClassName.value,\n                directionClassName.value,\n                orderClassName.value,\n            ],\n            ref: carouselItemRef,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CCarouselPlugin = {\n    install: (app) => {\n        app.component(CCarousel.name, CCarousel);\n        app.component(CCarouselCaption.name, CCarouselCaption);\n        app.component(CCarouselItem.name, CCarouselItem);\n    },\n};\n\nconst CCloseButtonPlugin = {\n    install: (app) => {\n        app.component(CCloseButton.name, CCloseButton);\n    },\n};\n\nconst CCollapsePlugin = {\n    install: (app) => {\n        app.component(CCollapse.name, CCollapse);\n    },\n};\n\nvar top = 'top';\nvar bottom = 'bottom';\nvar right = 'right';\nvar left = 'left';\nvar auto = 'auto';\nvar basePlacements = [top, bottom, right, left];\nvar start = 'start';\nvar end = 'end';\nvar clippingParents = 'clippingParents';\nvar viewport = 'viewport';\nvar popper = 'popper';\nvar reference = 'reference';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = 'beforeRead';\nvar read = 'read';\nvar afterRead = 'afterRead'; // pure-logic modifiers\n\nvar beforeMain = 'beforeMain';\nvar main = 'main';\nvar afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = 'beforeWrite';\nvar write = 'write';\nvar afterWrite = 'afterWrite';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\nfunction getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}\n\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect$2(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar applyStyles$1 = {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect$2,\n  requires: ['computeStyles']\n};\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\n\nfunction getBoundingClientRect(element, includeScale) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  var rect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (isHTMLElement(element) && includeScale) {\n    var offsetHeight = element.offsetHeight;\n    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n    // Fallback to 1 in case both values are `0`\n\n    if (offsetWidth > 0) {\n      scaleX = round(rect.width) / offsetWidth || 1;\n    }\n\n    if (offsetHeight > 0) {\n      scaleY = round(rect.height) / offsetHeight || 1;\n    }\n  }\n\n  return {\n    width: rect.width / scaleX,\n    height: rect.height / scaleY,\n    top: rect.top / scaleY,\n    right: rect.right / scaleX,\n    bottom: rect.bottom / scaleY,\n    left: rect.left / scaleX,\n    x: rect.left / scaleX,\n    y: rect.top / scaleY\n  };\n}\n\n// means it doesn't take into account transforms.\n\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}\n\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}\n\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}\n\nfunction getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;\n  var isIE = navigator.userAgent.indexOf('Trident') !== -1;\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle$1(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\nfunction withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}\n\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect$1(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (true) {\n    if (!isHTMLElement(arrowElement)) {\n      console.error(['Popper: \"arrow\" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));\n    }\n  }\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    if (true) {\n      console.error(['Popper: \"arrow\" modifier\\'s `element` must be a child of the popper', 'element.'].join(' '));\n    }\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar arrow$1 = {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect$1,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};\n\nfunction getVariation(placement) {\n  return placement.split('-')[1];\n}\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (true) {\n    var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';\n\n    if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {\n      return transitionProperty.indexOf(property) >= 0;\n    })) {\n      console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: \"transform\", \"top\", \"right\", \"bottom\", \"left\".', '\\n\\n', 'Disable the \"computeStyles\" modifier\\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\\n\\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));\n    }\n  }\n\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar computeStyles$1 = {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar eventListeners = {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};\n\nvar hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash$1[matched];\n  });\n}\n\nvar hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}\n\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n\nfunction getViewportRect(element) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}\n\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle$1(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle$1(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}\n\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n\nfunction getInnerBoundingClientRect(element) {\n  var rect = getBoundingClientRect(element);\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n    }\n  }\n\n  return offsets;\n}\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements$1.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements$1;\n\n    if (true) {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar flip$1 = {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar hide$1 = {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar offset$1 = {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar popperOffsets$1 = {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};\n\nfunction getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min$1 = offset + overflow[mainSide];\n    var max$1 = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar preventOverflow$1 = {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};\n\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}\n\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return [].concat(args).reduce(function (p, c) {\n    return p.replace(/%s/, c);\n  }, str);\n}\n\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];\nfunction validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n    .filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\" + String(modifier.name) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', '), \"\\\"\" + String(modifier.phase) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'effect':\n          if (modifier.effect != null && typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requires':\n          if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\" + s + \"\\\"\";\n          }).join(', ') + \"; but \\\"\" + key + \"\\\" was provided.\");\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}\n\nfunction uniqueBy(arr, fn) {\n  var identifiers = new Set();\n  return arr.filter(function (item) {\n    var identifier = fn(item);\n\n    if (!identifiers.has(identifier)) {\n      identifiers.add(identifier);\n      return true;\n    }\n  });\n}\n\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}\n\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (true) {\n          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {\n            var name = _ref.name;\n            return name;\n          });\n          validateModifiers(modifiers);\n\n          if (getBasePlacement(state.options.placement) === auto) {\n            var flipModifier = state.orderedModifiers.find(function (_ref2) {\n              var name = _ref2.name;\n              return name === 'flip';\n            });\n\n            if (!flipModifier) {\n              console.error(['Popper: \"auto\" placements require the \"flip\" modifier be', 'present and enabled to work.'].join(' '));\n            }\n          }\n\n          var _getComputedStyle = getComputedStyle$1(popper),\n              marginTop = _getComputedStyle.marginTop,\n              marginRight = _getComputedStyle.marginRight,\n              marginBottom = _getComputedStyle.marginBottom,\n              marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can\n          // cause bugs with positioning, so we'll warn the consumer\n\n\n          if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {\n            return parseFloat(margin);\n          })) {\n            console.warn(['Popper: CSS \"margin\" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));\n          }\n        }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (true) {\n            console.error(INVALID_ELEMENT_ERROR);\n          }\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (true) {\n            __debug_loops__ += 1;\n\n            if (__debug_loops__ > 100) {\n              console.error(INFINITE_LOOP_ERROR);\n              break;\n            }\n          }\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (true) {\n        console.error(INVALID_ELEMENT_ERROR);\n      }\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\n\nvar defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nconst CDropdown = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdown',\n    props: {\n        /**\n         * Set aligment of dropdown menu.\n         *\n         * @values { 'start' | 'end' | { xs: 'start' | 'end' } | { sm: 'start' | 'end' } | { md: 'start' | 'end' } | { lg: 'start' | 'end' } | { xl: 'start' | 'end'} | { xxl: 'start' | 'end'} }\n         */\n        alignment: {\n            type: [String, Object],\n            default: undefined,\n            required: false,\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            validator: (value) => {\n                if (value === 'start' || value === 'end') {\n                    return true;\n                }\n                else {\n                    if (typeof value.xs !== 'undefined' && (value.xs === 'start' || value.xs === 'end')) {\n                        return true;\n                    }\n                    if (typeof value.sm !== 'undefined' && (value.sm === 'start' || value.sm === 'end')) {\n                        return true;\n                    }\n                    if (typeof value.md !== 'undefined' && (value.md === 'start' || value.md === 'end')) {\n                        return true;\n                    }\n                    if (typeof value.lg !== 'undefined' && (value.lg === 'start' || value.lg === 'end')) {\n                        return true;\n                    }\n                    if (typeof value.xl !== 'undefined' && (value.xl === 'start' || value.xl === 'end')) {\n                        return true;\n                    }\n                    if (typeof value.xxl !== 'undefined' && (value.xxl === 'start' || value.xxl === 'end')) {\n                        return true;\n                    }\n                    return false;\n                }\n            },\n        },\n        /**\n         * Configure the auto close behavior of the dropdown:\n         * - `true` - the dropdown will be closed by clicking outside or inside the dropdown menu.\n         * - `false` - the dropdown will be closed by clicking the toggle button and manually calling hide or toggle method. (Also will not be closed by pressing esc key)\n         * - `'inside'` - the dropdown will be closed (only) by clicking inside the dropdown menu.\n         * - `'outside'` - the dropdown will be closed (only) by clicking outside the dropdown menu.\n         */\n        autoClose: {\n            type: [Boolean, String],\n            default: true,\n            validator: (value) => {\n                return typeof value === 'boolean' || ['inside', 'outside'].includes(value);\n            },\n        },\n        /**\n         * Sets a darker color scheme to match a dark navbar.\n         */\n        dark: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Sets a specified  direction and location of the dropdown menu.\n         *\n         * @values 'dropup', 'dropend', 'dropstart'\n         */\n        direction: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['dropup', 'dropend', 'dropstart'].includes(value);\n            },\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Describes the placement of your component after Popper.js has applied all the modifiers that may have flipped or altered the originally provided placement property.\n         *\n         * @values 'auto', 'top-end', 'top', 'top-start', 'bottom-end', 'bottom', 'bottom-start', 'right-start', 'right', 'right-end', 'left-start', 'left', 'left-end'\n         */\n        placement: {\n            type: String,\n            default: 'bottom-start',\n            required: false,\n        },\n        /**\n         * If you want to disable dynamic positioning set this property to `true`.\n         */\n        popper: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.\n         */\n        trigger: {\n            type: [String, Array],\n            required: false,\n            default: 'click',\n        },\n        /**\n         * Set the dropdown variant to an btn-group, dropdown, input-group, and nav-item.\n         *\n         * @values 'btn-group', 'dropdown', 'input-group', 'nav-item'\n         */\n        variant: {\n            type: String,\n            default: 'btn-group',\n            required: false,\n            validator: (value) => {\n                return ['btn-group', 'dropdown', 'input-group', 'nav-item'].includes(value);\n            },\n        },\n        /**\n         * Toggle the visibility of dropdown menu component.\n         */\n        visible: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const dropdownToggleRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const dropdownMenuRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const placement = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.placement);\n        const popper = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => {\n            visible.value = props.visible;\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('config', {\n            autoClose: props.autoClose,\n            alignment: props.alignment,\n            dark: props.dark,\n            popper: props.popper,\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('variant', props.variant);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('visible', visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('dropdownToggleRef', dropdownToggleRef);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('dropdownMenuRef', dropdownMenuRef);\n        if (props.direction === 'dropup') {\n            placement.value = 'top-start';\n        }\n        if (props.direction === 'dropend') {\n            placement.value = 'right-start';\n        }\n        if (props.direction === 'dropstart') {\n            placement.value = 'left-start';\n        }\n        if (props.alignment === 'end') {\n            placement.value = 'bottom-end';\n        }\n        const initPopper = () => {\n            // Disable popper if responsive aligment is set.\n            if (typeof props.alignment === 'object') {\n                return;\n            }\n            if (dropdownToggleRef.value) {\n                popper.value = createPopper(dropdownToggleRef.value, dropdownMenuRef.value, {\n                    placement: placement.value,\n                });\n            }\n        };\n        const destroyPopper = () => {\n            if (popper.value) {\n                popper.value.destroy();\n            }\n            popper.value = undefined;\n        };\n        const toggleMenu = (_visible) => {\n            if (props.disabled) {\n                return;\n            }\n            if (typeof _visible == 'boolean') {\n                visible.value = _visible;\n                return;\n            }\n            if (visible.value === true) {\n                visible.value = false;\n                return;\n            }\n            visible.value = true;\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('toggleMenu', toggleMenu);\n        const hideMenu = () => {\n            if (props.disabled) {\n                return;\n            }\n            visible.value = false;\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('hideMenu', hideMenu);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(visible, () => {\n            props.popper && (visible.value ? initPopper() : destroyPopper());\n            visible.value ? emit('show') : emit('hide');\n        });\n        return () => props.variant === 'input-group'\n            ? [slots.default && slots.default()]\n            : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                class: [\n                    props.variant === 'nav-item' ? 'nav-item dropdown' : props.variant,\n                    props.direction,\n                ],\n            }, slots.default && slots.default());\n    },\n});\n\nconst CDropdownItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdownItem',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'a',\n            required: false,\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CLink, {\n            class: 'dropdown-item',\n            active: props.active,\n            component: props.component,\n            disabled: props.disabled,\n            href: props.href,\n        }, {\n            default: () => slots.default && slots.default(),\n        });\n    },\n});\n\nconst CDropdownHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdownHeader',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'h6',\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: 'dropdown-header',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CDropdownDivider = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdownDivider',\n    setup() {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('hr', {\n            class: 'dropdown-divider',\n        });\n    },\n});\n\nconst CDropdownMenu = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdownMenu',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         *\n         * @values 'div', 'ul'\n         */\n        component: {\n            type: String,\n            default: 'div',\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        const dropdownToggleRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('dropdownToggleRef');\n        const dropdownMenuRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('dropdownMenuRef');\n        const config = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('config'); // eslint-disable-line @typescript-eslint/no-explicit-any\n        const hideMenu = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('hideMenu');\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('visible');\n        const { autoClose, alignment, dark, popper } = config;\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const alignmentClassNames = (alignment) => {\n            const classNames = [];\n            if (typeof alignment === 'object') {\n                Object.keys(alignment).map((key) => {\n                    classNames.push(`dropdown-menu${key === 'xs' ? '' : `-${key}`}-${alignment[key]}`);\n                });\n            }\n            if (typeof alignment === 'string') {\n                classNames.push(`dropdown-menu-${alignment}`);\n            }\n            return classNames;\n        };\n        const handleKeyup = (event) => {\n            if (autoClose === false) {\n                return;\n            }\n            if (event.key === 'Escape') {\n                hideMenu();\n            }\n        };\n        const handleMouseUp = (event) => {\n            if (dropdownToggleRef.value?.contains(event.target)) {\n                return;\n            }\n            if (autoClose === true) {\n                hideMenu();\n                return;\n            }\n            if (autoClose === 'inside' && dropdownMenuRef.value?.contains(event.target)) {\n                hideMenu();\n                return;\n            }\n            if (autoClose === 'outside' &&\n                !dropdownMenuRef.value?.contains(event.target)) {\n                hideMenu();\n            }\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUpdated)(() => {\n            visible.value && window.addEventListener('mouseup', handleMouseUp);\n            visible.value && window.addEventListener('keyup', handleKeyup);\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onUnmounted)(() => {\n            window.removeEventListener('mouseup', handleMouseUp);\n            window.removeEventListener('keyup', handleKeyup);\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'dropdown-menu',\n                { 'dropdown-menu-dark': dark, show: visible.value },\n                alignmentClassNames(alignment),\n            ],\n            ...((typeof alignment === 'object' || !popper) && {\n                'data-coreui-popper': 'static',\n            }),\n            ref: dropdownMenuRef,\n        }, props.component === 'ul'\n            ? slots.default && slots.default().map((vnode) => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {}, vnode))\n            : slots.default && slots.default());\n    },\n});\n\nconst CDropdownToggle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CDropdownToggle',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Enables pseudo element caret on toggler.\n         */\n        caret: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'button',\n            require: false,\n        },\n        /**\n         * Create a custom toggler which accepts any content.\n         */\n        custom: Boolean,\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * @values 'rounded', 'rounded-top', 'rounded-end', 'rounded-bottom', 'rounded-start', 'rounded-circle', 'rounded-pill', 'rounded-0', 'rounded-1', 'rounded-2', 'rounded-3'\n         */\n        shape: Shape,\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * Similarly, create split button dropdowns with virtually the same markup as single button dropdowns, but with the addition of `.dropdown-toggle-split` className for proper spacing around the dropdown caret.\n         */\n        split: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.\n         *\n         * @type 'hover' | 'focus' | 'click'\n         */\n        trigger: {\n            type: String,\n            default: 'click',\n            required: false,\n        },\n        /**\n         * Set the button variant to an outlined button or a ghost button.\n         *\n         * @values 'ghost', 'outline'\n         */\n        variant: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['ghost', 'outline'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        const togglerRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const dropdownToggleRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('dropdownToggleRef');\n        const dropdownVariant = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('variant');\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('visible');\n        const toggleMenu = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('toggleMenu');\n        const className = [\n            {\n                'dropdown-toggle': props.caret,\n                'dropdown-toggle-split': props.split,\n                active: props.active,\n                disabled: props.disabled,\n            },\n        ];\n        const triggers = {\n            ...((props.trigger === 'click' || props.trigger.includes('click')) && {\n                onClick: () => {\n                    if (props.disabled) {\n                        return;\n                    }\n                    toggleMenu();\n                },\n            }),\n            ...((props.trigger === 'focus' || props.trigger.includes('focus')) && {\n                onfocus: () => {\n                    if (props.disabled) {\n                        return;\n                    }\n                    toggleMenu(true);\n                },\n                onblur: () => {\n                    if (props.disabled) {\n                        return;\n                    }\n                    toggleMenu(false);\n                },\n            }),\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            if (togglerRef.value) {\n                dropdownToggleRef.value = togglerRef.value.$el;\n            }\n        });\n        return () => props.custom\n            ? slots.default &&\n                slots.default().map((slot) => (0,vue__WEBPACK_IMPORTED_MODULE_0__.cloneVNode)(slot, {\n                    ref: (el) => {\n                        togglerRef.value = el;\n                    },\n                    ...triggers,\n                }))\n            : dropdownVariant === 'nav-item'\n                ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('a', {\n                    active: props.active,\n                    class: [\n                        'nav-link',\n                        className,\n                        {\n                            show: visible.value,\n                        },\n                    ],\n                    disabled: props.disabled,\n                    href: '#',\n                    ref: dropdownToggleRef,\n                    ...triggers,\n                }, { default: () => slots.default && slots.default() })\n                : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CButton, {\n                    class: [\n                        className,\n                        {\n                            show: visible.value,\n                        },\n                    ],\n                    active: props.active,\n                    color: props.color,\n                    disabled: props.disabled,\n                    ref: (el) => {\n                        togglerRef.value = el;\n                    },\n                    shape: props.shape,\n                    size: props.size,\n                    ...triggers,\n                    ...(props.component === 'button' && { type: 'button' }),\n                    variant: props.variant,\n                }, () => props.split\n                    ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'visually-hidden' }, 'Toggle Dropdown')\n                    : slots.default && slots.default());\n    },\n});\n\nconst CDropdownPlugin = {\n    install: (app) => {\n        app.component(CDropdown.name, CDropdown);\n        app.component(CDropdownItem.name, CDropdownItem);\n        app.component(CDropdownHeader.name, CDropdownHeader);\n        app.component(CDropdownDivider.name, CDropdownDivider);\n        app.component(CDropdownMenu.name, CDropdownMenu);\n        app.component(CDropdownToggle.name, CDropdownToggle);\n    },\n};\n\nconst CFooter = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFooter',\n    props: {\n        /**\n         * Place footer in non-static positions.\n         *\n         * @values 'fixed', 'sticky'\n         */\n        position: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['fixed', 'sticky'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['footer', { [`footer-${props.position}`]: props.position }] }, slots.default && slots.default());\n    },\n});\n\nconst CFooterPlugin = {\n    install: (app) => {\n        app.component(CFooter.name, CFooter);\n    },\n};\n\nconst CForm = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CForm',\n    props: {\n        /**\n         * Mark a form as validated. If you set it `true`, all validation styles will be applied to the forms component.\n         */\n        validated: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('form', { class: [{ ['was-validated']: props.validated }] }, slots.default && slots.default());\n    },\n});\n\nconst CFormFeedback = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormFeedback',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'div',\n        },\n        /**\n         * Method called immediately after the `value` prop changes.\n         */\n        invalid: Boolean,\n        /**\n         * If your form layout allows it, you can display validation feedback in a styled tooltip.\n         */\n        tooltip: Boolean,\n        /**\n         * Set component validation state to valid.\n         */\n        valid: Boolean,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                {\n                    [`invalid-${props.tooltip ? 'tooltip' : 'feedback'}`]: props.invalid,\n                    [`valid-${props.tooltip ? 'tooltip' : 'feedback'}`]: props.valid,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CFormControlValidation = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormControlValidation',\n    inheritAttrs: false,\n    props: {\n        /**\n         * @ignore\n         */\n        describedby: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedback: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedbackInvalid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        feedbackValid: {\n            type: String,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: Boolean,\n        /**\n         * Display validation feedback in a styled tooltip.\n         *\n         * @since 4.3.0\n         */\n        tooltipFeedback: Boolean,\n        /**\n         * Set component validation state to valid.\n         */\n        valid: Boolean,\n    },\n    setup(props, { slots }) {\n        return () => [\n            props.feedback &&\n                (props.valid || props.invalid) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormFeedback, {\n                    ...(props.invalid && { id: props.describedby }),\n                    invalid: props.invalid,\n                    tooltip: props.tooltipFeedback,\n                    valid: props.valid,\n                }, {\n                    default: () => (slots.feedback && slots.feedback()) || props.feedback,\n                }),\n            (props.feedbackInvalid || slots.feedbackInvalid) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormFeedback, {\n                    id: props.describedby,\n                    invalid: true,\n                    tooltip: props.tooltipFeedback,\n                }, {\n                    default: () => (slots.feedbackInvalid && slots.feedbackInvalid()) || props.feedbackInvalid,\n                }),\n            (props.feedbackValid || slots.feedbackValid) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormFeedback, {\n                    tooltip: props.tooltipFeedback,\n                    valid: true,\n                }, {\n                    default: () => (slots.feedbackValid && slots.feedbackValid()) || props.feedbackValid,\n                }),\n        ];\n    },\n});\n\nconst CFormLabel = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormLabel',\n    props: {\n        /**\n         * A string of all className you want to be applied to the component, and override standard className value.\n         */\n        customClassName: {\n            type: [Array, String],\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('label', {\n            class: props.customClassName ? props.customClassName : 'form-label',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CFormCheck = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormCheck',\n    inheritAttrs: false,\n    props: {\n        /**\n         * Create button-like checkboxes and radio buttons.\n         *\n         * @see http://coreui.io/vue/docs/components/button.html\n         */\n        button: {\n            type: Object,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedback: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedbackInvalid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        feedbackValid: {\n            type: String,\n        },\n        /**\n         * Sets hit area to the full area of the component.\n         */\n        hitArea: {\n            type: String,\n            validator: (value) => {\n                // The value must match one of these strings\n                return ['full'].includes(value);\n            },\n        },\n        /**\n         * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Input Checkbox indeterminate Property\n         */\n        indeterminate: Boolean,\n        /**\n         * Group checkboxes or radios on the same horizontal row by adding.\n         */\n        inline: {\n            type: Boolean,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: Boolean,\n        /**\n         * The element represents a caption for a component.\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: [Boolean, String],\n            value: undefined,\n        },\n        /**\n         * Display validation feedback in a styled tooltip.\n         *\n         * @since 4.3.0\n         */\n        tooltipFeedback: Boolean,\n        /**\n         * Specifies the type of component.\n         *\n         * @values 'checkbox', 'radio'\n         */\n        type: {\n            type: String,\n            default: 'checkbox',\n        },\n        /**\n         * Set component validation state to valid.\n         */\n        valid: {\n            type: Boolean,\n        },\n    },\n    emits: [\n        /**\n         * Event occurs when the checked value has been changed.\n         */\n        'change',\n        /**\n         * Emit the new value whenever there’s a change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit, slots }) {\n        const handleChange = (event) => {\n            const target = event.target;\n            emit('change', event);\n            emit('update:modelValue', target.checked);\n        };\n        const className = [\n            'form-check',\n            {\n                'form-check-inline': props.inline,\n                'is-invalid': props.invalid,\n                'is-valid': props.valid,\n            },\n            attrs.class,\n        ];\n        const inputClassName = props.button\n            ? 'btn-check'\n            : [\n                'form-check-input',\n                {\n                    'is-invalid': props.invalid,\n                    'is-valid': props.valid,\n                    'me-2': props.hitArea,\n                },\n            ];\n        const formControl = () => {\n            return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('input', {\n                ...attrs,\n                ...(props.modelValue && { checked: props.modelValue }),\n                class: inputClassName,\n                id: props.id,\n                indeterminate: props.indeterminate,\n                onChange: (event) => handleChange(event),\n                type: props.type,\n            });\n        };\n        const formLabel = () => props.button\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CButton, {\n                component: 'label',\n                ...props.button,\n                ...(props.id && { for: props.id }),\n            }, {\n                default: () => (slots.label && slots.label()) || props.label,\n            })\n            : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, { class: 'form-check-label', ...(props.id && { for: props.id }) }, {\n                default: () => (slots.label && slots.label()) || props.label,\n            });\n        const formValidation = () => {\n            return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormControlValidation, {\n                describedby: attrs['aria-describedby'],\n                feedback: props.feedback,\n                feedbackInvalid: props.feedbackInvalid,\n                feedbackValid: props.feedbackValid,\n                invalid: props.invalid,\n                tooltipFeedback: props.tooltipFeedback,\n                valid: props.valid,\n            });\n        };\n        return () => props.button\n            ? [formControl(), (slots.label || props.label) && formLabel(), formValidation()]\n            : props.label\n                ? props.hitArea\n                    ? [\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, {\n                            customClassName: className,\n                            ...(props.id && { for: props.id }),\n                        }, [formControl(), props.label]),\n                        formValidation(),\n                    ]\n                    : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                        class: className,\n                    }, [formControl(), props.label && formLabel(), formValidation()])\n                : formControl();\n    },\n});\n\nconst CFormFloating = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormFloating',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: 'form-floating',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CFormText = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormText',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'div',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'form-text' }, slots.default && slots.default());\n    },\n});\n\nconst CFormControlWrapper = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormControlWrapper',\n    inheritAttrs: false,\n    props: {\n        ...CFormControlValidation.props,\n        /**\n         * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        floatingLabel: {\n            type: String,\n        },\n        /**\n         * @ignore\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Add a caption for a component.\n         *\n         * @since 4.3.0\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * Add helper text to the component.\n         *\n         * @since 4.3.0\n         */\n        text: {\n            type: String,\n        },\n    },\n    setup(props, { slots }) {\n        return () => props.floatingLabel\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormFloating, [\n                slots.default && slots.default(),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, {\n                    for: props.id,\n                }, {\n                    default: () => (slots.label && slots.label()) || props.label || props.floatingLabel,\n                }),\n            ])\n            : [\n                (props.label || slots.label) &&\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, {\n                        for: props.id,\n                    }, {\n                        default: () => (slots.label && slots.label()) || props.label,\n                    }),\n                slots.default && slots.default(),\n                (props.text || slots.text) &&\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormText, {\n                        id: props.describedby,\n                    }, {\n                        default: () => (slots.text && slots.text()) || props.text,\n                    }),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormControlValidation, {\n                    describedby: props.describedby,\n                    feedback: props.feedback,\n                    feedbackInvalid: props.feedbackInvalid,\n                    feedbackValid: props.feedbackValid,\n                    floatingLabel: props.floatingLabel,\n                    invalid: props.invalid,\n                    tooltipFeedback: props.tooltipFeedback,\n                    valid: props.valid,\n                }, {\n                    ...(slots.feedback && { feedback: () => slots.feedback && slots.feedback() }),\n                    ...(slots.feedbackInvalid && {\n                        feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n                    }),\n                    ...(slots.feedbackValid && {\n                        feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n                    }),\n                }),\n            ];\n    },\n});\n\nconst CFormInput = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormInput',\n    props: {\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        // Inherited Props from CFormControlWrapper\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedback: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedbackInvalid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        feedbackValid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        floatingLabel: {\n            type: String,\n        },\n        /**\n         * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: Boolean,\n        /**\n         * Add a caption for a component.\n         *\n         * @since 4.3.0\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: String,\n            default: undefined,\n        },\n        /**\n         * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n         */\n        plainText: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Toggle the readonly state for the component.\n         */\n        readonly: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm' | 'lg'\n         */\n        size: {\n            type: String,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * Add helper text to the component.\n         *\n         * @since 4.3.0\n         */\n        text: {\n            type: String,\n        },\n        /**\n         * Display validation feedback in a styled tooltip.\n         *\n         * @since 4.3.0\n         */\n        tooltipFeedback: Boolean,\n        /**\n         * Specifies the type of component.\n         *\n         * @values 'color' | 'file' | 'text' | string\n         */\n        type: {\n            type: String,\n            default: 'text',\n        },\n        /**\n         * Set component validation state to valid.\n         */\n        valid: Boolean,\n    },\n    emits: [\n        /**\n         * Event occurs when the element loses focus, after the content has been changed.\n         */\n        'change',\n        /**\n         * Event occurs immediately after the value of a component has changed.\n         */\n        'input',\n        /**\n         * Emit the new value whenever there’s an input or change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit, slots }) {\n        const handleChange = (event) => {\n            const target = event.target;\n            emit('change', event);\n            emit('update:modelValue', target.value);\n        };\n        const handleInput = (event) => {\n            const target = event.target;\n            emit('input', event);\n            emit('update:modelValue', target.value);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormControlWrapper, {\n            describedby: attrs['aria-describedby'],\n            feedback: props.feedback,\n            feedbackInvalid: props.feedbackInvalid,\n            feedbackValid: props.feedbackValid,\n            floatingLabel: props.floatingLabel,\n            id: props.id,\n            invalid: props.invalid,\n            label: props.label,\n            text: props.text,\n            tooltipFeedback: props.tooltipFeedback,\n            valid: props.valid,\n        }, {\n            default: () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('input', {\n                ...attrs,\n                class: [\n                    props.plainText ? 'form-control-plaintext' : 'form-control',\n                    {\n                        'form-control-color': props.type === 'color',\n                        [`form-control-${props.size}`]: props.size,\n                        'is-invalid': props.invalid,\n                        'is-valid': props.valid,\n                    },\n                    attrs.class,\n                ],\n                disabled: props.disabled,\n                onChange: (event) => handleChange(event),\n                onInput: (event) => handleInput(event),\n                readonly: props.readonly,\n                type: props.type,\n                ...(props.modelValue && { value: props.modelValue }),\n            }, slots.default && slots.default()),\n            ...(slots.feedback && { feedback: () => slots.feedback && slots.feedback() }),\n            ...(slots.feedbackInvalid && {\n                feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.feedbackValid && {\n                feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.label && { label: () => slots.label && slots.label() }),\n            ...(slots.text && { text: () => slots.text && slots.text() }),\n        });\n    },\n});\n\nconst CFormRange = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormRange',\n    props: {\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            default: undefined,\n        },\n        /**\n         * Add a caption for a component.\n         *\n         * @since 4.3.0\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * Specifies the maximum value for the component.\n         */\n        max: {\n            type: Number,\n            default: undefined,\n        },\n        /**\n         * Specifies the minimum value for the component.\n         */\n        min: {\n            type: Number,\n            default: undefined,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: String,\n            value: undefined,\n        },\n        /**\n         * Toggle the readonly state for the component.\n         */\n        readonly: {\n            type: Boolean,\n        },\n        /**\n         * Specifies the interval between legal numbers in the component.\n         */\n        steps: {\n            type: Number,\n            default: undefined,\n        },\n        /**\n         * The `value` attribute of component.\n         *\n         * @controllable onChange\n         * */\n        value: {\n            type: Number,\n            default: undefined,\n        },\n    },\n    emits: [\n        /**\n         * Event occurs when the value has been changed.\n         */\n        'change',\n        /**\n         * Emit the new value whenever there’s a change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit, slots }) {\n        const handleChange = (event) => {\n            const target = event.target;\n            emit('change', event);\n            emit('update:modelValue', target.value);\n        };\n        return () => [\n            props.label &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, {\n                    for: attrs.id,\n                }, {\n                    default: () => (slots.label && slots.label()) || props.label,\n                }),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('input', {\n                ...attrs,\n                class: 'form-range',\n                disabled: props.disabled,\n                max: props.max,\n                min: props.min,\n                onChange: (event) => handleChange(event),\n                readonly: props.readonly,\n                steps: props.steps,\n                type: 'range',\n                value: props.modelValue,\n            }, slots.default && slots.default()),\n        ];\n    },\n});\n\nconst CFormSelect = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormSelect',\n    props: {\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedback: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedbackInvalid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        feedbackValid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        floatingLabel: {\n            type: String,\n        },\n        /**\n         * Specifies the number of visible options in a drop-down list.\n         */\n        htmlSize: {\n            type: Number,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: Boolean,\n        /**\n         * Add a caption for a component.\n         *\n         * @since 4.3.0\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: [String, Array],\n            default: undefined,\n            require: false,\n        },\n        multiple: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Options list of the select component. Available keys: `label`, `value`, `disabled`.\n         * Examples:\n         * - `:options=\"[{ value: 'js', label: 'JavaScript' }, { value: 'html', label: 'HTML', disabled: true }]\"`\n         * - `:options=\"['js', 'html']\"`\n         */\n        options: {\n            type: Array,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm' | 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            require: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * Add helper text to the component.\n         *\n         * @since 4.3.0\n         */\n        text: {\n            type: String,\n        },\n        /**\n         * Display validation feedback in a styled tooltip.\n         *\n         * @since 4.3.0\n         */\n        tooltipFeedback: Boolean,\n        /**\n         * Set component validation state to valid.\n         */\n        valid: Boolean,\n    },\n    emits: [\n        /**\n         * Event occurs when when a user changes the selected option of a `<select>` element.\n         */\n        'change',\n        /**\n         * Emit the new value whenever there’s a change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit, slots }) {\n        const handleChange = (event) => {\n            const target = event.target;\n            const selected = Array.from(target.options)\n                .filter((option) => option.selected)\n                .map((option) => option.value);\n            emit('change', event);\n            emit('update:modelValue', target.multiple ? selected : selected[0]);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormControlWrapper, {\n            describedby: attrs['aria-describedby'],\n            feedback: props.feedback,\n            feedbackInvalid: props.feedbackInvalid,\n            feedbackValid: props.feedbackValid,\n            floatingLabel: props.floatingLabel,\n            id: props.id,\n            invalid: props.invalid,\n            label: props.label,\n            text: props.text,\n            tooltipFeedback: props.tooltipFeedback,\n            valid: props.valid,\n        }, {\n            default: () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('select', {\n                ...attrs,\n                class: [\n                    'form-select',\n                    {\n                        [`form-select-${props.size}`]: props.size,\n                        'is-invalid': props.invalid,\n                        'is-valid': props.valid,\n                    },\n                    attrs.class,\n                ],\n                multiple: props.multiple,\n                onChange: (event) => handleChange(event),\n                size: props.htmlSize,\n                ...(props.modelValue && !props.multiple && { value: props.modelValue }),\n            }, props.options\n                ? props.options.map((option) => {\n                    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('option', {\n                        ...(typeof option === 'object' && {\n                            ...(option.disabled && { disabled: option.disabled }),\n                            ...(option.selected && { selected: option.selected }),\n                            ...(option.value && {\n                                value: option.value,\n                                ...(props.modelValue &&\n                                    props.multiple &&\n                                    props.modelValue.includes(option.value) && { selected: true }),\n                            }),\n                        }),\n                    }, typeof option === 'string' ? option : option.label);\n                })\n                : slots.default && slots.default()),\n            ...(slots.feedback && { feedback: () => slots.feedback && slots.feedback() }),\n            ...(slots.feedbackInvalid && {\n                feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.feedbackValid && {\n                feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.label && { label: () => slots.label && slots.label() }),\n            ...(slots.text && { text: () => slots.text && slots.text() }),\n        });\n    },\n});\n\nconst CFormSwitch = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormSwitch',\n    inheritAttrs: false,\n    props: {\n        /**\n         * The id global attribute defines an identifier (ID) that must be unique in the whole document\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: {\n            type: Boolean,\n        },\n        /**\n         * The element represents a caption for a component.\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: [Boolean, String],\n            value: undefined,\n        },\n        /**\n         * Size the component large or extra large. Works only with `switch`.\n         *\n         * @values 'lg' | 'xl'\n         */\n        size: {\n            type: String,\n            validator: (value) => {\n                return ['lg', 'xl'].includes(value);\n            },\n        },\n        /**\n         * Specifies the type of component.\n         *\n         * @values 'checkbox', 'radio'\n         */\n        type: {\n            type: String,\n            default: 'checkbox',\n        },\n        /**\n         * Set component validation state to valid.\n         */\n        valid: {\n            type: Boolean,\n        },\n    },\n    emits: [\n        /**\n         * Event occurs when the checked value has been changed.\n         */\n        'change',\n        /**\n         * Emit the new value whenever there’s a change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit }) {\n        const handleChange = (event) => {\n            const target = event.target;\n            emit('change', event);\n            emit('update:modelValue', target.checked);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'form-check form-switch',\n                {\n                    [`form-switch-${props.size}`]: props.size,\n                    'is-invalid': props.invalid,\n                    'is-valid': props.valid,\n                },\n            ],\n        }, [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('input', {\n                ...attrs,\n                ...(props.modelValue && { checked: props.modelValue }),\n                class: [\n                    'form-check-input',\n                    {\n                        'is-invalid': props.invalid,\n                        'is-valid': props.valid,\n                    },\n                ],\n                id: props.id,\n                onChange: (event) => handleChange(event),\n                type: props.type,\n            }),\n            props.label &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormLabel, {\n                    ...(props.id && { for: props.id }),\n                    class: 'form-check-label',\n                }, {\n                    default: () => props.label,\n                }),\n        ]);\n    },\n});\n\nconst CFormTextarea = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CFormTextarea',\n    props: {\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedback: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable feedback.\n         *\n         * @since 4.3.0\n         */\n        feedbackInvalid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        feedbackValid: {\n            type: String,\n        },\n        /**\n         * Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, `:invalid` and `:valid`.\n         *\n         * @since 4.3.0\n         */\n        floatingLabel: {\n            type: String,\n        },\n        /**\n         * The id global attribute defines an identifier (ID) that must be unique in the whole document.\n         */\n        id: {\n            type: String,\n        },\n        /**\n         * Set component validation state to invalid.\n         */\n        invalid: Boolean,\n        /**\n         * Add a caption for a component.\n         *\n         * @since 4.3.0\n         */\n        label: {\n            type: String,\n        },\n        /**\n         * The default name for a value passed using v-model.\n         */\n        modelValue: {\n            type: String,\n            default: undefined,\n        },\n        /**\n         * Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side `readonly`.\n         */\n        plainText: {\n            type: Boolean,\n        },\n        /**\n         * Toggle the readonly state for the component.\n         */\n        readonly: {\n            type: Boolean,\n        },\n        /**\n         * Add helper text to the component.\n         *\n         * @since 4.3.0\n         */\n        text: {\n            type: String,\n        },\n        /**\n         * Display validation feedback in a styled tooltip.\n         *\n         * @since 4.3.0\n         */\n        tooltipFeedback: Boolean,\n        /**\n         * Set component validation state to valid.\n         */\n        valid: Boolean,\n    },\n    emits: [\n        /**\n         * Event occurs when the element loses focus, after the content has been changed.\n         */\n        'change',\n        /**\n         * Event occurs immediately after the value of a component has changed.\n         */\n        'input',\n        /**\n         * Emit the new value whenever there’s an input or change event.\n         */\n        'update:modelValue',\n    ],\n    setup(props, { attrs, emit, slots }) {\n        const handleInput = (event) => {\n            const target = event.target;\n            emit('input', event);\n            emit('update:modelValue', target.value);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CFormControlWrapper, {\n            describedby: attrs['aria-describedby'],\n            feedback: props.feedback,\n            feedbackInvalid: props.feedbackInvalid,\n            feedbackValid: props.feedbackValid,\n            floatingLabel: props.floatingLabel,\n            id: props.id,\n            invalid: props.invalid,\n            label: props.label,\n            text: props.text,\n            tooltipFeedback: props.tooltipFeedback,\n            valid: props.valid,\n        }, {\n            default: () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('textarea', {\n                ...attrs,\n                disabled: props.disabled,\n                readonly: props.readonly,\n                class: [\n                    props.plainText ? 'form-control-plaintext' : 'form-control',\n                    {\n                        'is-invalid': props.invalid,\n                        'is-valid': props.valid,\n                    },\n                ],\n                onInput: (event) => handleInput(event),\n                ...(props.modelValue && { value: props.modelValue }),\n            }, slots.default && slots.default()),\n            ...(slots.feedback && { feedback: () => slots.feedback && slots.feedback() }),\n            ...(slots.feedbackInvalid && {\n                feedbackInvalid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.feedbackValid && {\n                feedbackValid: () => slots.feedbackInvalid && slots.feedbackInvalid(),\n            }),\n            ...(slots.label && { label: () => slots.label && slots.label() }),\n            ...(slots.text && { text: () => slots.text && slots.text() }),\n        });\n    },\n});\n\nconst CInputGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CInputGroup',\n    props: {\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'input-group',\n                {\n                    [`input-group-${props.size}`]: props.size,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CInputGroupText = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CInputGroupText',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'span',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'input-group-text' }, slots.default && slots.default());\n    },\n});\n\nconst CFormPlugin = {\n    install: (app) => {\n        app.component(CForm.name, CForm);\n        app.component(CFormCheck.name, CFormCheck);\n        // app.component(CFormControl.name, CFormControl)\n        app.component(CFormFeedback.name, CFormFeedback);\n        app.component(CFormFloating.name, CFormFloating);\n        app.component(CFormInput.name, CFormInput);\n        app.component(CFormLabel.name, CFormLabel);\n        app.component(CFormRange.name, CFormRange);\n        app.component(CFormSelect.name, CFormSelect);\n        app.component(CFormSwitch.name, CFormSwitch);\n        app.component(CFormText.name, CFormText);\n        app.component(CFormTextarea.name, CFormTextarea);\n        app.component(CInputGroup.name, CInputGroup);\n        app.component(CInputGroupText.name, CInputGroupText);\n    },\n};\n\nconst BREAKPOINTS$4 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nconst CCol = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CCol',\n    props: {\n        /**\n         * The number of columns/offset/order on extra small devices (<576px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        xs: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns/offset/order on small devices (<768px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        sm: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns/offset/order on medium devices (<992px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        md: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns/offset/order on large devices (<1200px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        lg: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns/offset/order on X-Large devices (<1400px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        xl: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns/offset/order on XX-Large devices (≥1400px).\n         *\n         * @values 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }\n         */\n        xxl: {\n            type: [Boolean, Number, String, Object],\n            default: undefined,\n            require: false,\n        },\n    },\n    setup(props, { slots }) {\n        const repsonsiveClassNames = [];\n        BREAKPOINTS$4.forEach((bp) => {\n            const breakpoint = props[bp];\n            const infix = bp === 'xs' ? '' : `-${bp}`;\n            if (breakpoint) {\n                if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n                    repsonsiveClassNames.push(`col${infix}-${breakpoint}`);\n                }\n                if (typeof breakpoint === 'boolean') {\n                    repsonsiveClassNames.push(`col${infix}`);\n                }\n            }\n            if (breakpoint && typeof breakpoint === 'object') {\n                if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n                    repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`);\n                }\n                if (typeof breakpoint.span === 'boolean') {\n                    repsonsiveClassNames.push(`col${infix}`);\n                }\n                if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n                    repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`);\n                }\n                if (typeof breakpoint.offset === 'number') {\n                    repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`);\n                }\n            }\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [repsonsiveClassNames.length ? repsonsiveClassNames : 'col'],\n        }, slots.default && slots.default());\n    },\n});\n\nconst BREAKPOINTS$3 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'fluid',\n];\nconst CContainer = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CContainer',\n    props: {\n        /**\n         * Set container 100% wide until small breakpoint.\n         */\n        sm: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set container 100% wide until medium breakpoint.\n         */\n        md: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set container 100% wide until large breakpoint.\n         */\n        lg: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set container 100% wide until X-large breakpoint.\n         */\n        xl: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set container 100% wide until XX-large breakpoint.\n         */\n        xxl: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set container 100% wide, spanning the entire width of the viewport.\n         */\n        fluid: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        const repsonsiveClassNames = [];\n        BREAKPOINTS$3.forEach((bp) => {\n            const breakpoint = props[bp];\n            breakpoint && repsonsiveClassNames.push(`container-${bp}`);\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [repsonsiveClassNames.length ? repsonsiveClassNames : 'container'],\n        }, slots.default && slots.default());\n    },\n});\n\nconst BREAKPOINTS$2 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nconst CRow = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CRow',\n    props: {\n        /**\n         * The number of columns/offset/order on extra small devices (<576px).\n         *\n         * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n         */\n        xs: {\n            type: Object,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * The number of columns/offset/order on small devices (<768px).\n         *\n         * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n         */\n        sm: {\n            type: Object,\n            default: undefined,\n            required: false,\n            /**\n             * The number of columns/offset/order on medium devices (<992px).\n             *\n             * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n             */\n        },\n        md: {\n            type: Object,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * The number of columns/offset/order on large devices (<1200px).\n         *\n         * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n         */\n        lg: {\n            type: Object,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * The number of columns/offset/order on X-Large devices (<1400px).\n         *\n         * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n         */\n        xl: {\n            type: Object,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * The number of columns/offset/order on XX-Large devices (≥1400px).\n         *\n         * @values { cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }\n         */\n        xxl: {\n            type: Object,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        const repsonsiveClassNames = [];\n        BREAKPOINTS$2.forEach((bp) => {\n            const breakpoint = props[bp];\n            const infix = bp === 'xs' ? '' : `-${bp}`;\n            if (typeof breakpoint === 'object') {\n                if (breakpoint.cols) {\n                    repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`);\n                }\n                if (typeof breakpoint.gutter === 'number') {\n                    repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`);\n                }\n                if (typeof breakpoint.gutterX === 'number') {\n                    repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`);\n                }\n                if (typeof breakpoint.gutterY === 'number') {\n                    repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`);\n                }\n            }\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: ['row', repsonsiveClassNames],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CGridPlugin = {\n    install: (app) => {\n        app.component(CCol.name, CCol);\n        app.component(CContainer.name, CContainer);\n        app.component(CRow.name, CRow);\n    },\n};\n\nconst CHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeader',\n    props: {\n        /**\n         * Defines optional container wrapping children elements.\n         *\n         * @values boolean, 'sm', 'md', 'lg', 'xl', 'xxl', 'fluid'\n         */\n        container: {\n            type: [Boolean, String],\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return (typeof value === 'boolean' || ['sm', 'md', 'lg', 'xl', 'xxl', 'fluid'].includes(value));\n            },\n        },\n        /**\n         * Place header in non-static positions.\n         *\n         * @values 'fixed', 'sticky'\n         */\n        position: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['fixed', 'sticky'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['header', { [`header-${props.position}`]: props.position }] }, props.container\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: `container${props.container !== true ? '-' + props.container : ''}` }, slots.default && slots.default())\n            : slots.default && slots.default());\n    },\n});\n\nconst CHeaderBrand = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeaderBrand',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'a',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'header-brand' }, slots.default && slots.default());\n    },\n});\n\nconst CHeaderDivider = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeaderDivider',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'header-divider' }, slots.default && slots.default());\n    },\n});\n\nconst CHeaderNav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeaderNav',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'ul',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: 'header-nav',\n            role: 'navigation',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CHeaderText = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeaderText',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'header-text' }, slots.default && slots.default());\n    },\n});\n\nconst CHeaderToggler = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CHeaderToggler',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n            class: 'header-toggler',\n            type: 'button',\n            'aria-label': 'Toggle navigation',\n        }, slots.default ? slots.default() : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: ['header-toggler-icon'] }));\n    },\n});\n\nconst CHeaderPlugin = {\n    install: (app) => {\n        app.component(CHeader.name, CHeader);\n        app.component(CHeaderBrand.name, CHeaderBrand);\n        app.component(CHeaderDivider.name, CHeaderDivider);\n        app.component(CHeaderNav.name, CHeaderNav);\n        app.component(CHeaderText.name, CHeaderText);\n        app.component(CHeaderToggler.name, CHeaderToggler);\n    },\n};\n\nconst CImage = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CImage',\n    props: {\n        /**\n         * Set the horizontal aligment.\n         *\n         * @values 'start', 'center', 'end'\n         */\n        align: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['start', 'center', 'end'].includes(value);\n            },\n        },\n        /**\n         * Make image responsive.\n         */\n        fluid: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Make image rounded.\n         */\n        rounded: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Give an image a rounded 1px border appearance.\n         */\n        thumbnail: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('img', {\n            class: [\n                {\n                    [`float-${props.align}`]: props.align && (props.align === 'start' || props.align === 'end'),\n                    'd-block mx-auto': props.align && props.align === 'center',\n                    'img-fluid': props.fluid,\n                    rounded: props.rounded,\n                    'img-thumbnail': props.thumbnail,\n                },\n            ],\n        });\n    },\n});\n\nconst CImagePlugin = {\n    install: (app) => {\n        app.component(CImage.name, CImage);\n    },\n};\n\nconst CListGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CListGroup',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'ul',\n        },\n        /**\n         * Remove some borders and rounded corners to render list group items edge-to-edge in a parent component (e.g., `<CCard>`)\n         */\n        flush: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Specify a layout type.\n         *\n         * @values 'horizontal', 'horizontal-sm', 'horizontal-md', 'horizontal-lg', 'horizontal-xl', 'horizontal-xxl',\n         */\n        layout: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return [\n                    'horizontal',\n                    'horizontal-sm',\n                    'horizontal-md',\n                    'horizontal-lg',\n                    'horizontal-xl',\n                    'horizontal-xxl',\n                ].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'list-group',\n                {\n                    'list-group-flush': props.flush,\n                    [`list-group-${props.layout}`]: props.layout,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CListGroupItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CListGroupItem',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'li',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'list-group-item',\n                {\n                    [`list-group-item-${props.color}`]: props.color,\n                    'list-group-item-action': props.component === 'a' || props.component === 'button',\n                    [`active`]: props.active,\n                    [`disabled`]: props.disabled,\n                },\n            ],\n            ...((props.component === 'a' || props.component === 'button') && {\n                active: props.active,\n                disabled: props.disabled,\n            }),\n            ...(props.active && { 'aria-current': true }),\n            ...(props.disabled && { 'aria-disabled': true }),\n        }, slots.default && slots.default());\n    },\n});\n\nconst CListGroupPlugin = {\n    install: (app) => {\n        app.component(CListGroup.name, CListGroup);\n        app.component(CListGroupItem.name, CListGroupItem);\n    },\n};\n\nconst CModal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CModal',\n    inheritAttrs: false,\n    props: {\n        /**\n         * Align the modal in the center or top of the screen.\n         *\n         * @values 'top', 'center'\n         */\n        alignment: {\n            default: 'top',\n            required: false,\n            validator: (value) => {\n                return ['top', 'center'].includes(value);\n            },\n        },\n        /**\n         * Apply a backdrop on body while offcanvas is open.\n         *\n         * @values 'static'\n         */\n        backdrop: {\n            type: [Boolean, String],\n            default: true,\n            require: false,\n        },\n        /**\n         * A string of all className you want applied to the modal content component.\n         */\n        contentClassName: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Set modal to covers the entire user viewport\n         *\n         * @values boolean, 'sm', 'md', 'lg', 'xl', 'xxl'\n         */\n        fullscreen: {\n            type: [Boolean, String],\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                if (typeof value == 'string') {\n                    return ['sm', 'md', 'lg', 'xl', 'xxl'].includes(value);\n                }\n                if (typeof value == 'boolean') {\n                    return true;\n                }\n                return false;\n            },\n        },\n        /**\n         * Closes the modal when escape key is pressed.\n         */\n        keyboard: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * Create a scrollable modal that allows scrolling the modal body.\n         */\n        scrollable: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Size the component small, large, or extra large.\n         *\n         * @values 'sm', 'lg', 'xl'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg', 'xl'].includes(value);\n            },\n        },\n        /**\n         * Remove animation to create modal that simply appear rather than fade in to view.\n         */\n        transition: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * By default the component is unmounted after close animation, if you want to keep the component mounted set this property to false.\n         */\n        unmountOnClose: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * Toggle the visibility of alert component.\n         */\n        visible: Boolean,\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be closed.\n         */\n        'close',\n        /**\n         * Callback fired when the component requests to be closed.\n         */\n        'close-prevented',\n        /**\n         * Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\n         */\n        'show',\n    ],\n    setup(props, { slots, attrs, emit }) {\n        const modalRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const modalContentRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => {\n            visible.value = props.visible;\n        });\n        const handleEnter = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            document.body.classList.add('modal-open');\n            el.style.display = 'block';\n            setTimeout(() => {\n                el.classList.add('show');\n            }, 1);\n            emit('show');\n        };\n        const handleAfterEnter = () => {\n            window.addEventListener('mousedown', handleMouseDown);\n            window.addEventListener('keyup', handleKeyUp);\n        };\n        const handleLeave = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            document.body.classList.remove('modal-open');\n            if (document.body.className === '') {\n                document.body.removeAttribute('class');\n            }\n            el.classList.remove('show');\n        };\n        const handleAfterLeave = (el) => {\n            window.removeEventListener('mousedown', handleMouseDown);\n            window.removeEventListener('keyup', handleKeyUp);\n            el.style.display = 'none';\n        };\n        const handleDismiss = () => {\n            emit('close');\n            visible.value = false;\n        };\n        const handleKeyUp = (event) => {\n            if (modalContentRef.value && !modalContentRef.value.contains(event.target)) {\n                if (props.backdrop !== 'static' && event.key === 'Escape' && props.keyboard) {\n                    handleDismiss();\n                }\n                if (props.backdrop === 'static') {\n                    modalRef.value.classList.add('modal-static');\n                    emit('close-prevented');\n                    setTimeout(() => {\n                        modalRef.value.classList.remove('modal-static');\n                    }, 300);\n                }\n            }\n        };\n        const handleMouseDown = (event) => {\n            window.addEventListener('mouseup', () => handleMouseUp(event), { once: true });\n        };\n        const handleMouseUp = (event) => {\n            if (modalContentRef.value && !modalContentRef.value.contains(event.target)) {\n                if (props.backdrop !== 'static') {\n                    handleDismiss();\n                }\n                if (props.backdrop === 'static') {\n                    modalRef.value.classList.add('modal-static');\n                    setTimeout(() => {\n                        modalRef.value.classList.remove('modal-static');\n                    }, 300);\n                }\n            }\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('handleDismiss', handleDismiss);\n        const modal = () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'modal',\n                {\n                    ['fade']: props.transition,\n                },\n                attrs.class,\n            ],\n            ref: modalRef,\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'modal-dialog',\n                {\n                    'modal-dialog-centered': props.alignment === 'center',\n                    [`modal-fullscreen-${props.fullscreen}-down`]: props.fullscreen && typeof props.fullscreen === 'string',\n                    'modal-fullscreen': props.fullscreen && typeof props.fullscreen === 'boolean',\n                    ['modal-dialog-scrollable']: props.scrollable,\n                    [`modal-${props.size}`]: props.size,\n                },\n            ],\n            role: 'dialog',\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: ['modal-content', props.contentClassName], ref: modalContentRef }, slots.default && slots.default())));\n        return () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n                css: false,\n                onEnter: (el, done) => handleEnter(el, done),\n                onAfterEnter: () => handleAfterEnter(),\n                onLeave: (el, done) => handleLeave(el, done),\n                onAfterLeave: (el) => handleAfterLeave(el),\n            }, () => props.unmountOnClose\n                ? visible.value && modal()\n                : (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)(modal(), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, visible.value]])),\n            props.backdrop &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CBackdrop, {\n                    class: 'modal-backdrop',\n                    visible: visible.value,\n                }),\n        ];\n    },\n});\n\nconst CModalBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CModalBody',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'modal-body' }, slots.default && slots.default());\n    },\n});\n\nconst CModalFooter = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CModalFooter',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'modal-footer' }, slots.default && slots.default());\n    },\n});\n\nconst CModalHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CModalHeader',\n    props: {\n        /**\n         * Add a close button component to the header.\n         */\n        closeButton: {\n            type: Boolean,\n            required: false,\n            default: true,\n        },\n    },\n    setup(props, { slots }) {\n        const handleDismiss = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('handleDismiss');\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'modal-header' }, [\n            slots.default && slots.default(),\n            props.closeButton && (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCloseButton, { onClick: () => handleDismiss() }, ''),\n        ]);\n    },\n});\n\nconst CModalTitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CModalTitle',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'h5',\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'modal-title' }, slots.default && slots.default());\n    },\n});\n\nconst CModalPlugin = {\n    install: (app) => {\n        app.component(CModal.name, CModal);\n        app.component(CModalBody.name, CModalBody);\n        app.component(CModalFooter.name, CModalFooter);\n        app.component(CModalHeader.name, CModalHeader);\n        app.component(CModalTitle.name, CModalTitle);\n    },\n};\n\nconst CNav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNav',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'ul',\n        },\n        /**\n         * Specify a layout type for component.\n         *\n         * @values 'fill', 'justified'\n         */\n        layout: {\n            type: String,\n            required: false,\n            default: undefined,\n            validator: (value) => {\n                return ['fill', 'justified'].includes(value);\n            },\n        },\n        /**\n         * Set the nav variant to tabs or pills.\n         *\n         * @values 'tabs', 'pills'\n         */\n        variant: {\n            type: String,\n            required: false,\n            default: undefined,\n            validator: (value) => {\n                return ['tabs', 'pills'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'nav',\n                {\n                    [`nav-${props.layout}`]: props.layout,\n                    [`nav-${props.variant}`]: props.variant,\n                },\n            ],\n            role: 'navigation',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CNavGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavGroup',\n    props: {\n        /**\n         * Make nav group more compact by cutting all `padding` in half.\n         */\n        compact: Boolean,\n        /**\n         * Show nav group items.\n         */\n        visible: Boolean,\n    },\n    emits: ['visible-change'],\n    setup(props, { slots, emit }) {\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const navGroupRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visibleGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const handleVisibleChange = (visible, index) => {\n            if (visible) {\n                visibleGroup.value = index;\n            }\n            else {\n                if (visibleGroup.value === index) {\n                    visibleGroup.value = 0;\n                }\n            }\n        };\n        const isVisible = (index) => Boolean(visibleGroup.value === index);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            visible.value = props.visible;\n            props.visible && navGroupRef.value.classList.add('show');\n            emit('visible-change', visible.value);\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => {\n            visible.value = props.visible;\n            if (visible.value === false) {\n                visibleGroup.value = undefined;\n            }\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(visible, () => {\n            emit('visible-change', visible.value);\n        });\n        const handleTogglerClick = () => {\n            visible.value = !visible.value;\n            emit('visible-change', visible.value);\n        };\n        const handleBeforeEnter = (el) => {\n            el.style.height = '0px';\n            navGroupRef.value.classList.add('show');\n        };\n        const handleEnter = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            el.style.height = `${el.scrollHeight}px`;\n        };\n        const handleAfterEnter = (el) => {\n            el.style.height = 'auto';\n        };\n        const handleBeforeLeave = (el) => {\n            el.style.height = `${el.scrollHeight}px`;\n        };\n        const handleLeave = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            setTimeout(() => {\n                el.style.height = '0px';\n            }, 1);\n        };\n        const handleAfterLeave = () => {\n            navGroupRef.value.classList.remove('show');\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {\n            class: 'nav-group',\n            ref: navGroupRef,\n        }, [\n            slots.togglerContent &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('a', {\n                    class: ['nav-link', 'nav-group-toggle'],\n                    onClick: handleTogglerClick,\n                }, slots.togglerContent && slots.togglerContent()),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n                css: false,\n                onBeforeEnter: (el) => handleBeforeEnter(el),\n                onEnter: (el, done) => handleEnter(el, done),\n                onAfterEnter: (el) => handleAfterEnter(el),\n                onBeforeLeave: (el) => handleBeforeLeave(el),\n                onLeave: (el, done) => handleLeave(el, done),\n                onAfterLeave: () => handleAfterLeave(),\n            }, {\n                default: () => visible.value &&\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ul', {\n                        class: [\n                            'nav-group-items',\n                            {\n                                compact: props.compact,\n                            },\n                        ],\n                    }, slots.default &&\n                        slots.default().map((vnode, index) => {\n                            // @ts-expect-error name is defined in component\n                            if (vnode.type.name === 'CNavGroup') {\n                                return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vnode, {\n                                    onVisibleChange: (visible) => handleVisibleChange(visible, index + 1),\n                                    ...(visibleGroup.value && { visible: isVisible(index + 1) }),\n                                });\n                            }\n                            return vnode;\n                        })),\n            }),\n        ]);\n    },\n});\n\nconst CNavGroupItems = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavGroupItems',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ul', { class: 'nav-group-items' }, slots.default && slots.default());\n    },\n});\n\nconst CNavLink = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavLink',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'a',\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * @ignore\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CLink, {\n            class: 'nav-link',\n            active: props.active,\n            component: props.component,\n            disabled: props.disabled,\n            href: props.href,\n        }, {\n            default: () => slots.default && slots.default(),\n        });\n    },\n});\n\nconst CNavItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavItem',\n    props: {\n        ...CNavLink.props,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {\n            class: 'nav-item',\n        }, props.href\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CNavLink, {\n                active: props.active,\n                component: props.component,\n                disabled: props.disabled,\n                href: props.href,\n            }, {\n                default: () => slots.default && slots.default(),\n            })\n            : slots.default && slots.default());\n    },\n});\n\nconst CNavTitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavTitle',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', { class: 'nav-title' }, slots.default && slots.default());\n    },\n});\n\nconst CNavPlugin = {\n    install: (app) => {\n        app.component(CNav.name, CNav);\n        app.component(CNavGroup.name, CNavGroup);\n        app.component(CNavGroupItems.name, CNavGroupItems);\n        app.component(CNavItem.name, CNavItem);\n        app.component(CNavLink.name, CNavLink);\n        app.component(CNavTitle.name, CNavTitle);\n    },\n};\n\nconst CNavbar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavbar',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n        /**\n         * Sets if the color of text should be colored for a light or dark dark background.\n         *\n         * @values 'dark', 'light'\n         */\n        colorScheme: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['dark', 'light'].includes(value);\n            },\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'nav',\n            required: false,\n        },\n        /**\n         * Defines optional container wrapping children elements.\n         *\n         * @values boolean, 'sm', 'md', 'lg', 'xl', 'xxl', 'fluid'\n         */\n        container: {\n            type: [Boolean, String],\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return (typeof value === 'boolean' || ['sm', 'md', 'lg', 'xl', 'xxl', 'fluid'].includes(value));\n            },\n        },\n        /**\n         * Defines the responsive breakpoint to determine when content collapses.\n         *\n         * @values boolean, 'sm', 'md', 'lg', 'xl', 'xxl'\n         */\n        expand: {\n            type: [Boolean, String],\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return typeof value === 'boolean' || ['sm', 'md', 'lg', 'xl', 'xxl'].includes(value);\n            },\n        },\n        /**\n         * Place component in non-static positions.\n         *\n         * @values 'fixed-top', 'fixed-bottom', 'sticky-top'\n         */\n        placement: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['fixed-top', 'fixed-bottom', 'sticky-top'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                'navbar',\n                {\n                    [`bg-${props.color}`]: props.color,\n                    [`navbar-${props.colorScheme}`]: props.colorScheme,\n                    [typeof props.expand === 'boolean'\n                        ? 'navbar-expand'\n                        : `navbar-expand-${props.expand}`]: props.expand,\n                },\n                props.placement,\n            ],\n        }, props.container\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: [`container${props.container !== true ? '-' + props.container : ''}`] }, slots.default && slots.default())\n            : slots.default && slots.default());\n    },\n});\n\nconst CNavbarBrand = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavbarBrand',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         *\n         */\n        component: {\n            type: String,\n            default: 'a',\n            required: false,\n        },\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component ? props.component : props.href ? 'a' : 'span', {\n            class: 'navbar-brand',\n            href: props.href,\n        }, slots.default && slots.default());\n    },\n});\n\nconst CNavbarNav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavbarNav',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'ul',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: 'navbar-nav',\n            role: 'navigation',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CNavbarText = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavbarText',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: 'navbar-text' }, slots.default && slots.default());\n    },\n});\n\nconst CNavbarToggler = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CNavbarToggler',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', {\n            class: 'navbar-toggler',\n        }, slots.default ? slots.default() : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: ['navbar-toggler-icon'] }));\n    },\n});\n\nconst CNavbarPlugin = {\n    install: (app) => {\n        app.component(CNavbar.name, CNavbar);\n        app.component(CNavbarBrand.name, CNavbarBrand);\n        app.component(CNavbarNav.name, CNavbarNav);\n        app.component(CNavbarText.name, CNavbarText);\n        app.component(CNavbarToggler.name, CNavbarToggler);\n    },\n};\n\nconst COffcanvas = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'COffcanvas',\n    props: {\n        /**\n         * Apply a backdrop on body while offcanvas is open.\n         */\n        backdrop: {\n            type: Boolean,\n            default: true,\n            require: false,\n        },\n        /**\n         * Closes the offcanvas when escape key is pressed.\n         */\n        keyboard: {\n            type: Boolean,\n            default: true,\n            require: false,\n        },\n        /**\n         * Components placement, there’s no default placement.\n         *\n         * @values 'start', 'end', 'top', 'bottom'\n         */\n        placement: {\n            type: String,\n            default: undefined,\n            require: true,\n            validator: (value) => {\n                return ['start', 'end', 'top', 'bottom'].includes(value);\n            },\n        },\n        /**\n         * Allow body scrolling while offcanvas is open\n         */\n        scroll: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n        /**\n         * Toggle the visibility of offcanvas component.\n         */\n        visible: {\n            type: Boolean,\n            require: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const offcanvasRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => {\n            visible.value = props.visible;\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(visible, () => {\n            if (visible.value) {\n                if (!props.scroll) {\n                    document.body.style.overflow = 'hidden';\n                    document.body.style.paddingRight = '0px';\n                }\n                return;\n            }\n            if (!props.scroll) {\n                document.body.style.removeProperty('overflow');\n                document.body.style.removeProperty('padding-right');\n            }\n        });\n        const handleEnter = (el, done) => {\n            emit('show');\n            executeAfterTransition(() => done(), el);\n            setTimeout(() => {\n                el.style.visibility = 'visible';\n                el.classList.add('show');\n            }, 1);\n        };\n        const handleAfterEnter = () => {\n            window.addEventListener('mousedown', handleMouseDown);\n            window.addEventListener('keyup', handleKeyUp);\n        };\n        const handleLeave = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            window.removeEventListener('mousedown', handleMouseDown);\n            window.removeEventListener('keyup', handleKeyUp);\n            el.classList.remove('show');\n        };\n        const handleAfterLeave = (el) => {\n            el.style.visibility = 'hidden';\n        };\n        const handleDismiss = () => {\n            visible.value = false;\n            emit('hide');\n        };\n        const handleKeyUp = (event) => {\n            if (offcanvasRef.value && !offcanvasRef.value.contains(event.target)) {\n                if (event.key === 'Escape' && props.keyboard && props.backdrop) {\n                    return handleDismiss();\n                }\n            }\n        };\n        const handleMouseDown = (event) => {\n            window.addEventListener('mouseup', () => handleMouseUp(event), { once: true });\n        };\n        const handleMouseUp = (event) => {\n            if (offcanvasRef.value && !offcanvasRef.value.contains(event.target)) {\n                props.backdrop && handleDismiss();\n            }\n        };\n        return () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n                css: false,\n                onEnter: (el, done) => handleEnter(el, done),\n                onAfterEnter: () => handleAfterEnter(),\n                onLeave: (el, done) => handleLeave(el, done),\n                onAfterLeave: (el) => handleAfterLeave(el),\n            }, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                class: [\n                    'offcanvas',\n                    {\n                        [`offcanvas-${props.placement}`]: props.placement,\n                    },\n                ],\n                ref: offcanvasRef,\n                role: 'dialog',\n            }, slots.default && slots.default()), [[vVisible, props.visible]])),\n            props.backdrop &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CBackdrop, {\n                    class: 'offcanvas-backdrop',\n                    visible: visible.value,\n                }),\n        ];\n    },\n});\n\nconst COffcanvasBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'COffcanvasBody',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'offcanvas-body' }, slots.default && slots.default());\n    },\n});\n\nconst COffcanvasHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'COffcanvasHeader',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'offcanvas-header' }, slots.default && slots.default());\n    },\n});\n\nconst COffcanvasTitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'COffcanvasTitle',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            required: false,\n            default: 'h5',\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, { class: 'offcanvas-title' }, slots.default && slots.default());\n    },\n});\n\nconst COffcanvasPlugin = {\n    install: (app) => {\n        app.component(COffcanvas.name, COffcanvas);\n        app.component(COffcanvasBody.name, COffcanvasBody);\n        app.component(COffcanvasHeader.name, COffcanvasHeader);\n        app.component(COffcanvasTitle.name, COffcanvasTitle);\n    },\n};\n\nconst CPagination = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CPagination',\n    props: {\n        /**\n         * Set the alignment of pagination components.\n         *\n         * @values 'start', 'center', 'end'\n         */\n        align: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['start', 'center', 'end'].includes(value);\n            },\n        },\n        /**\n         * Size the component small or large.\n         *\n         * @values 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['sm', 'lg'].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('nav', {}, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ul', {\n            class: [\n                'pagination',\n                {\n                    [`justify-content-${props.align}`]: props.align,\n                    [`pagination-${props.size}`]: props.size,\n                },\n            ],\n        }, slots.default && slots.default()));\n    },\n});\n\nconst CPaginationItem = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CPaginationItem',\n    props: {\n        /**\n         * Toggle the active state for the component.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Toggle the disabled state for the component.\n         */\n        disabled: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * The href attribute specifies the URL of the page the link goes to.\n         */\n        href: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => {\n            const component = props.component ? props.component : props.active ? 'span' : 'a';\n            return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('li', {\n                class: [\n                    'page-item',\n                    {\n                        ['active']: props.active,\n                        ['disabled']: props.disabled,\n                    },\n                ],\n                ...(props.active && { active: props.active, 'aria-current': 'page' }),\n            }, component === 'a'\n                ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CLink, {\n                    class: ['page-link'],\n                    component: component,\n                    href: props.href,\n                }, {\n                    default: () => slots.default && slots.default(),\n                })\n                : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(component, { class: ['page-link'] }, slots.default && slots.default()));\n        };\n    },\n});\n\nconst CPaginationPlugin = {\n    install: (app) => {\n        app.component(CPagination.name, CPagination);\n        app.component(CPaginationItem.name, CPaginationItem);\n    },\n};\n\nconst BREAKPOINTS$1 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nconst CPlaceholder = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CPlaceholder',\n    props: {\n        /**\n         * Set animation type to better convey the perception of something being actively loaded.\n         *\n         * @values 'glow', 'wave'\n         */\n        animation: {\n            type: String,\n            default: undefined,\n            require: false,\n            validator: (value) => {\n                return ['glow', 'wave'].includes(value);\n            },\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'span',\n            required: false,\n        },\n        /**\n         * Size the component extra small, small, or large.\n         *\n         * @values 'xs', 'sm', 'lg'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['xs', 'sm', 'lg'].includes(value);\n            },\n        },\n        /**\n         * The number of columns on extra small devices (<576px).\n         */\n        xs: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns on small devices (<768px).\n         */\n        sm: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns on medium devices (<992px).\n         */\n        md: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns on large devices (<1200px).\n         */\n        lg: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns on X-Large devices (<1400px).\n         */\n        xl: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * The number of columns on XX-Large devices (≥1400px).\n         */\n        xxl: {\n            type: Number,\n            default: undefined,\n            require: false,\n        },\n    },\n    setup(props, { slots }) {\n        const repsonsiveClassNames = [];\n        BREAKPOINTS$1.forEach((bp) => {\n            const breakpoint = props[bp];\n            const infix = bp === 'xs' ? '' : `-${bp}`;\n            if (typeof breakpoint === 'number') {\n                repsonsiveClassNames.push(`col${infix}-${breakpoint}`);\n            }\n            if (typeof breakpoint === 'boolean') {\n                repsonsiveClassNames.push(`col${infix}`);\n            }\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                props.animation ? `placeholder-${props.animation}` : 'placeholder',\n                {\n                    [`bg-${props.color}`]: props.color,\n                    [`placeholder-${props.size}`]: props.size,\n                },\n                repsonsiveClassNames,\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CPlaceholderPlugin = {\n    install: (app) => {\n        app.component(CPlaceholder.name, CPlaceholder);\n    },\n};\n\nconst CProgressBar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CProgressBar',\n    props: {\n        /**\n         * Use to animate the stripes right to left via CSS3 animations.\n         */\n        animated: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * The percent to progress the ProgressBar.\n         */\n        value: {\n            type: Number,\n            required: false,\n            default: 0,\n        },\n        /**\n         * Set the progress bar variant to optional striped.\n         *\n         * @values 'striped'\n         */\n        variant: {\n            type: String,\n            default: undefined,\n            require: false,\n            validator: (value) => {\n                return value === 'striped';\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'progress-bar',\n                `bg-${props.color}`,\n                {\n                    [`progress-bar-${props.variant}`]: props.variant,\n                    ['progress-bar-animated']: props.animated,\n                },\n            ],\n            role: 'progressbar',\n            style: `width: ${props.value}%`,\n            'aria-valuenow': props.value,\n            'aria-valuemin': '0',\n            'aria-valuemax': '100',\n        }, slots.default && slots.default());\n    },\n});\n\nconst CProgress = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CProgress',\n    props: {\n        /**\n         * Sets the height of the component. If you set that value the inner `<CProgressBar>` will automatically resize accordingly.\n         */\n        height: {\n            type: Number,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Makes progress bar thinner.\n         */\n        thin: Boolean,\n        /**\n         * Change the default color to white.\n         */\n        white: Boolean,\n        ...CProgressBar.props,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'progress',\n                {\n                    'progress-thin': props.thin,\n                    'progress-white': props.white,\n                },\n            ],\n            ...(props.height, { style: `height: ${props.height}px` }),\n        }, props.value\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CProgressBar, {\n                value: props.value,\n                animated: props.animated,\n                color: props.color,\n                variant: props.variant,\n            }, slots.default && slots.default())\n            : slots.default && slots.default());\n    },\n});\n\nconst CProgressPlugin = {\n    install: (app) => {\n        app.component(CProgress.name, CProgress);\n        app.component(CProgressBar.name, CProgressBar);\n    },\n};\n\nconst CPopover = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CPopover',\n    props: {\n        /**\n         * Content for your component. If you want to pass non-string value please use dedicated slot `<template #content>...</template>`\n         */\n        content: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Offset of the popover relative to its target.\n         */\n        offset: {\n            type: Array,\n            default: () => [0, 8],\n            required: false,\n        },\n        /**\n         * Describes the placement of your component after Popper.js has applied all the modifiers that may have flipped or altered the originally provided placement property.\n         */\n        placement: {\n            type: String,\n            default: 'top',\n            required: false,\n            validator: (value) => {\n                return ['top', 'right', 'bottom', 'left'].includes(value);\n            },\n        },\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.\n         *\n         * @values 'click', 'focus', 'hover'\n         */\n        trigger: {\n            type: [String, Array],\n            default: 'click',\n            required: false,\n            validator: (value) => {\n                if (typeof value === 'string') {\n                    return ['click', 'focus', 'hover'].includes(value);\n                }\n                if (Array.isArray(value)) {\n                    return value.every((e) => ['click', 'focus', 'hover'].includes(e));\n                }\n                return false;\n            },\n        },\n        /**\n         * Toggle the visibility of popover component.\n         */\n        visible: Boolean,\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const togglerRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const popoverRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const popper = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        const handleEnter = (el, done) => {\n            emit('show');\n            initPopper();\n            el.classList.add('show');\n            executeAfterTransition(() => done(), el);\n        };\n        const handleLeave = (el, done) => {\n            emit('hide');\n            el.classList.remove('show');\n            executeAfterTransition(() => {\n                done();\n                destroyPopper();\n            }, el);\n        };\n        const handleToggle = (event) => {\n            togglerRef.value = event.target;\n            visible.value = !visible.value;\n        };\n        const initPopper = () => {\n            if (togglerRef.value) {\n                popper.value = createPopper(togglerRef.value, popoverRef.value, {\n                    placement: props.placement,\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: props.offset,\n                            },\n                        },\n                    ],\n                });\n            }\n        };\n        const destroyPopper = () => {\n            if (popper.value) {\n                popper.value.destroy();\n            }\n            popper.value = undefined;\n        };\n        return () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {\n                to: 'body',\n            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n                onEnter: (el, done) => handleEnter(el, done),\n                onLeave: (el, done) => handleLeave(el, done),\n            }, () => visible.value &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'popover fade bs-popover-auto',\n                    ref: popoverRef,\n                    role: 'tooltip',\n                }, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'popover-arrow', 'data-popper-arrow': '' }),\n                    (props.title || slots.title) &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'popover-header' }, {\n                            default: () => (slots.title && slots.title()) || props.title,\n                        }),\n                    (props.content || slots.content) &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'popover-body' }, {\n                            default: () => (slots.content && slots.content()) || props.content,\n                        }),\n                ]))),\n            slots.toggler &&\n                slots.toggler({\n                    on: {\n                        click: (event) => props.trigger.includes('click') && handleToggle(event),\n                        blur: (event) => props.trigger.includes('focus') && handleToggle(event),\n                        focus: (event) => props.trigger.includes('focus') && handleToggle(event),\n                        mouseenter: (event) => props.trigger.includes('hover') && handleToggle(event),\n                        mouseleave: (event) => props.trigger.includes('hover') && handleToggle(event),\n                    },\n                }),\n        ];\n    },\n});\n\nconst CPopoverPlugin = {\n    install: (app) => {\n        app.component(CPopover.name, CPopover);\n    },\n};\n\nconst isOnMobile = (element) => Boolean(getComputedStyle(element).getPropertyValue('--cui-is-mobile'));\nconst isVisible = (element) => {\n    const rect = element.getBoundingClientRect();\n    return (rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n};\nconst CSidebar = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebar',\n    props: {\n        /**\n         * Make sidebar narrow.\n         */\n        narrow: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set sidebar to overlaid variant.\n         */\n        overlaid: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Place sidebar in non-static positions.\n         */\n        position: {\n            type: String,\n            default: undefined,\n            validator: (value) => {\n                return ['fixed'].includes(value);\n            },\n        },\n        /**\n         * Size the component small, large, or extra large.\n         */\n        size: {\n            type: String,\n            default: undefined,\n            validator: (value) => {\n                return ['sm', 'lg', 'xl'].includes(value);\n            },\n        },\n        /**\n         * Expand narrowed sidebar on hover.\n         */\n        unfoldable: Boolean,\n        /**\n         * Toggle the visibility of sidebar component.\n         */\n        visible: Boolean,\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n        /**\n         * Event emitted after visibility of component changed.\n         */\n        'visible-change',\n    ],\n    setup(props, { attrs, slots, emit }) {\n        const mobile = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const inViewport = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const sidebarRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(inViewport, () => {\n            emit('visible-change', inViewport.value);\n            inViewport.value ? emit('show') : emit('hide');\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(() => props.visible, () => (visible.value = props.visible));\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.watch)(mobile, () => {\n            if (mobile.value && visible.value)\n                visible.value = false;\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            mobile.value = isOnMobile(sidebarRef.value);\n            inViewport.value = isVisible(sidebarRef.value);\n            window.addEventListener('resize', () => handleResize());\n            window.addEventListener('mouseup', handleClickOutside);\n            window.addEventListener('keyup', handleKeyup);\n            sidebarRef.value.addEventListener('mouseup', handleOnClick);\n            sidebarRef.value.addEventListener('transitionend', () => {\n                inViewport.value = isVisible(sidebarRef.value);\n            });\n        });\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onBeforeUnmount)(() => {\n            window.removeEventListener('resize', () => handleResize());\n            window.removeEventListener('mouseup', handleClickOutside);\n            window.removeEventListener('keyup', handleKeyup);\n            sidebarRef.value.removeEventListener('mouseup', handleOnClick);\n            sidebarRef.value.removeEventListener('transitionend', () => {\n                inViewport.value = isVisible(sidebarRef.value);\n            });\n        });\n        const handleHide = () => {\n            visible.value = false;\n        };\n        const handleResize = () => {\n            mobile.value = isOnMobile(sidebarRef.value);\n            inViewport.value = isVisible(sidebarRef.value);\n        };\n        const handleKeyup = (event) => {\n            if (mobile.value && !sidebarRef.value.contains(event.target)) {\n                handleHide();\n            }\n        };\n        const handleClickOutside = (event) => {\n            if (mobile.value && !sidebarRef.value.contains(event.target)) {\n                handleHide();\n            }\n        };\n        const handleOnClick = (event) => {\n            const target = event.target;\n            target &&\n                target.classList.contains('nav-link') &&\n                !target.classList.contains('nav-group-toggle') &&\n                mobile.value &&\n                handleHide();\n        };\n        return () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                class: [\n                    'sidebar',\n                    {\n                        'sidebar-narrow': props.narrow,\n                        'sidebar-overlaid': props.overlaid,\n                        [`sidebar-${props.position}`]: props.position,\n                        [`sidebar-${props.size}`]: props.size,\n                        'sidebar-narrow-unfoldable': props.unfoldable,\n                        show: visible.value === true && mobile.value,\n                        hide: visible.value === false && !mobile.value,\n                    },\n                    attrs.class,\n                ],\n                ref: sidebarRef,\n            }, slots.default && slots.default()),\n            mobile.value &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CBackdrop, {\n                    class: 'sidebar-backdrop d-none',\n                    visible: props.visible,\n                    onClick: () => {\n                        visible.value = false;\n                    },\n                }),\n        ];\n    },\n});\n\nconst CSidebarBrand = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebarBrand',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'sidebar-brand' }, slots.default && slots.default());\n    },\n});\n\nconst CSidebarFooter = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebarFooter',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'sidebar-footer' }, slots.default && slots.default());\n    },\n});\n\nconst CSidebarHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebarHeader',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'sidebar-header' }, slots.default && slots.default());\n    },\n});\n\nconst CSidebarNav = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebarNav',\n    setup(_, { slots }) {\n        const visibleGroup = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const handleVisibleChange = (visible, index) => {\n            if (visible) {\n                visibleGroup.value = index;\n            }\n            else {\n                if (visibleGroup.value === index) {\n                    visibleGroup.value = 0;\n                }\n            }\n        };\n        const isVisible = (index) => Boolean(visibleGroup.value === index);\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('ul', {\n            class: 'sidebar-nav',\n        }, slots.default &&\n            slots.default().map((vnode, index) => {\n                // @ts-expect-error name is defined in component\n                if (vnode.type.name === 'CNavGroup') {\n                    return (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vnode, {\n                        onVisibleChange: (visible) => handleVisibleChange(visible, index + 1),\n                        ...(visibleGroup.value && { visible: isVisible(index + 1) }),\n                    });\n                }\n                return vnode;\n            }));\n    },\n});\n\nconst CSidebarToggler = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSidebarToggler',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('button', { class: 'sidebar-toggler' }, slots.default && slots.default());\n    },\n});\n\nconst CSidebarPlugin = {\n    install: (app) => {\n        app.component(CSidebar.name, CSidebar);\n        app.component(CSidebarBrand.name, CSidebarBrand);\n        app.component(CSidebarFooter.name, CSidebarFooter);\n        app.component(CSidebarHeader.name, CSidebarHeader);\n        app.component(CSidebarNav.name, CSidebarNav);\n        app.component(CSidebarToggler.name, CSidebarToggler);\n    },\n};\n\nconst CSpinner = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CSpinner',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return [\n                    'primary',\n                    'secondary',\n                    'success',\n                    'danger',\n                    'warning',\n                    'info',\n                    'dark',\n                    'light',\n                ].includes(value);\n            },\n        },\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: 'div',\n            required: false,\n        },\n        /**\n         * Size the component small.\n         *\n         * @values 'sm'\n         */\n        size: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return value === 'sm';\n            },\n        },\n        /**\n         * Set the button variant to an outlined button or a ghost button.\n         *\n         * @values 'border', 'grow'\n         */\n        variant: {\n            type: String,\n            default: 'border',\n            required: false,\n            validator: (value) => {\n                return ['border', 'grow'].includes(value);\n            },\n        },\n        /**\n         * Set visually hidden label for accessibility purposes.\n         */\n        visuallyHiddenLabel: {\n            type: String,\n            default: 'Loading...',\n            required: false,\n        },\n    },\n    setup(props) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n            class: [\n                `spinner-${props.variant}`,\n                `text-${props.color}`,\n                props.size && `spinner-${props.variant}-${props.size}`,\n            ],\n            role: 'status',\n        }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('span', { class: ['visually-hidden'] }, props.visuallyHiddenLabel));\n    },\n});\n\nconst CSpinnerPlugin = {\n    install: (app) => {\n        app.component(CSpinner.name, CSpinner);\n    },\n};\n\nconst CTable = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTable',\n    props: {\n        /**\n         * Set the vertical aligment.\n         *\n         * @values 'bottom', 'middle', 'top'\n         */\n        align: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['bottom', 'middle', 'top'].includes(value);\n            },\n        },\n        /**\n         * Sets the border color of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        borderColor: Color,\n        /**\n         * Add borders on all sides of the table and cells.\n         */\n        bordered: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Remove borders on all sides of the table and cells.\n         */\n        borderless: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Put the `<caption>` on the top of the table.\n         *\n         * @values 'top'\n         */\n        caption: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return value === 'top';\n            },\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n        /**\n         * Enable a hover state on table rows within a `<CTableBody>`.\n         */\n        hover: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n         *\n         * @values boolean, 'sm', 'md', 'lg', 'xl', 'xxl'\n         */\n        responsive: {\n            type: [Boolean, String],\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                if (typeof value == 'string') {\n                    return ['sm', 'md', 'lg', 'xl', 'xxl'].includes(value);\n                }\n                if (typeof value == 'boolean') {\n                    return true;\n                }\n                return false;\n            },\n        },\n        /**\n         * Make table more compact by cutting all cell `padding` in half.\n         */\n        small: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Add zebra-striping to any table row within the `<CTableBody>`.\n         */\n        striped: {\n            type: Boolean,\n            required: false,\n        },\n    },\n    setup(props, { slots, attrs }) {\n        const table = () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('table', {\n            class: [\n                'table',\n                {\n                    [`align-${props.align}`]: props.align,\n                    [`caption-${props.caption}`]: props.caption,\n                    [`border-${props.borderColor}`]: props.borderColor,\n                    'table-bordered': props.bordered,\n                    'table-borderless': props.borderless,\n                    [`table-${props.color}`]: props.color,\n                    'table-hover': props.hover,\n                    'table-sm': props.small,\n                    'table-striped': props.striped,\n                },\n                attrs.class,\n            ],\n        }, slots.default && slots.default());\n        return () => [\n            props.responsive\n                ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: typeof props.responsive === 'boolean'\n                        ? 'table-responsive'\n                        : `table-responsive-${props.responsive}`,\n                }, table())\n                : table(),\n        ];\n    },\n});\n\nconst CTableBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableBody',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('tbody', {\n            class: [\n                {\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTableCaption = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableCaption',\n    props: {},\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('caption', {}, slots.default && slots.default());\n    },\n});\n\nconst CTableDataCell = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableDataCell',\n    props: {\n        /**\n         * Highlight a table row or cell.\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set the vertical aligment.\n         *\n         * @values 'bottom', 'middle', 'top'\n         */\n        align: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['bottom', 'middle', 'top'].includes(value);\n            },\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('td', {\n            class: [\n                {\n                    [`align-${props.align}`]: props.align,\n                    'table-active': props.active,\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTableFoot = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableFoot',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('tfoot', {\n            class: [\n                {\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTableHead = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableHead',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('thead', {\n            class: [\n                {\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTableHeaderCell = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableHeaderCell',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('th', {\n            class: [\n                {\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTableRow = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTableRow',\n    props: {\n        /**\n         * Highlight a table row or cell..\n         */\n        active: {\n            type: Boolean,\n            required: false,\n        },\n        /**\n         * Set the vertical aligment.\n         *\n         * @values 'bottom', 'middle', 'top'\n         */\n        align: {\n            type: String,\n            default: undefined,\n            required: false,\n            validator: (value) => {\n                return ['bottom', 'middle', 'top'].includes(value);\n            },\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values  'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('tr', {\n            class: [\n                {\n                    [`align-${props.align}`]: props.align,\n                    'table-active': props.active,\n                    [`table-${props.color}`]: props.color,\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CTablePlugin = {\n    install: (app) => {\n        app.component(CTable.name, CTable);\n        app.component(CTableBody.name, CTableBody);\n        app.component(CTableCaption.name, CTableCaption);\n        app.component(CTableDataCell.name, CTableDataCell);\n        app.component(CTableFoot.name, CTableFoot);\n        app.component(CTableHead.name, CTableHead);\n        app.component(CTableHeaderCell.name, CTableHeaderCell);\n        app.component(CTableRow.name, CTableRow);\n    },\n};\n\nconst CTabContent = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTabContent',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'tab-content' }, slots.default && slots.default());\n    },\n});\n\nconst CTabPane = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTabPane',\n    props: {\n        /**\n         * Toggle the visibility of component.\n         */\n        visible: {\n            type: Boolean,\n            default: false,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const tabPaneRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const firstRender = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(true);\n        const handleEnter = (el, done) => {\n            firstRender.value = false;\n            emit('show');\n            setTimeout(() => {\n                executeAfterTransition(() => done(), el);\n                el.classList.add('show');\n            }, 1);\n        };\n        const handleLeave = (el, done) => {\n            firstRender.value = false;\n            emit('hide');\n            el.classList.remove('show');\n            executeAfterTransition(() => done(), el);\n        };\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n            onEnter: (el, done) => handleEnter(el, done),\n            onLeave: (el, done) => handleLeave(el, done),\n        }, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.withDirectives)((0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'tab-pane',\n                'fade',\n                {\n                    active: props.visible,\n                    show: firstRender.value && props.visible,\n                },\n            ],\n            ref: tabPaneRef,\n        }, slots.default && slots.default()), [[vue__WEBPACK_IMPORTED_MODULE_0__.vShow, props.visible]]));\n    },\n});\n\nconst CTabsPlugin = {\n    install: (app) => {\n        app.component(CTabContent.name, CTabContent);\n        app.component(CTabPane.name, CTabPane);\n    },\n};\n\nconst CToast = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CToast',\n    props: {\n        /**\n         * Auto hide the toast.\n         */\n        autohide: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light', string\n         */\n        color: Color,\n        /**\n         * Delay hiding the toast (ms).\n         */\n        delay: {\n            type: Number,\n            default: 5000,\n            required: false,\n        },\n        /**\n         * Optionally add a close button to component and allow it to self dismiss.\n         */\n        dismissible: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n        /**\n         * index of the component.\n         */\n        index: {\n            type: Number,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Title node for your component.\n         */\n        title: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Toggle the visibility of component.\n         */\n        visible: {\n            type: Boolean,\n            default: true,\n            required: false,\n        },\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be closed.\n         */\n        'close',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        let timeout = 0;\n        const updateVisible = (v) => {\n            visible.value = v;\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.provide)('updateVisible', updateVisible);\n        const handleBeforeEnter = (el) => {\n            el.classList.add('showing');\n        };\n        const handleEnter = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            el.classList.add('show');\n            setTimeout(() => {\n                el.classList.remove('showing');\n            }, 1);\n            if (props.index) {\n                emit('show', props.index);\n            }\n            else {\n                emit('show');\n            }\n        };\n        const handleLeave = (el, done) => {\n            executeAfterTransition(() => done(), el);\n            el.classList.add('showing');\n        };\n        const handleAfterLeave = (el) => {\n            el.classList.remove('show');\n            el.classList.add('hide');\n            if (props.index) {\n                emit('close', props.index);\n            }\n            else {\n                emit('close');\n            }\n        };\n        (0,vue__WEBPACK_IMPORTED_MODULE_0__.onMounted)(() => {\n            if (props.autohide) {\n                clearTimeout(timeout);\n                timeout = window.setTimeout(() => {\n                    visible.value = false;\n                    emit('close');\n                }, props.delay);\n            }\n        });\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n            appear: true,\n            onBeforeEnter: (el) => handleBeforeEnter(el),\n            onEnter: (el, done) => handleEnter(el, done),\n            onLeave: (el, done) => handleLeave(el, done),\n            onAfterLeave: (el) => handleAfterLeave(el),\n        }, () => visible.value &&\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                class: [\n                    'toast fade',\n                    {\n                        [`bg-${props.color}`]: props.color,\n                    },\n                ],\n                'aria-live': 'assertive',\n                'aria-atomic': true,\n                role: 'alert',\n                ref: 'toastRef',\n            }, slots.default && slots.default()));\n    },\n});\n\nconst CToastBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CToastBody',\n    setup(_, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'toast-body' }, slots.default && slots.default());\n    },\n});\n\nconst CToastClose = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CToastClose',\n    props: {\n        /**\n         * Component used for the root node. Either a string to use a HTML element or a component.\n         */\n        component: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        ...CCloseButton.props,\n    },\n    emits: [\n        /**\n         * Event called before the dissmiss animation has started.\n         */\n        'close',\n    ],\n    setup(props, { slots, emit }) {\n        // eslint-disable-next-line no-unused-vars\n        const updateVisible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.inject)('updateVisible');\n        const handleClose = () => {\n            emit('close');\n            updateVisible(false);\n        };\n        return () => props.component\n            ? (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(props.component, {\n                onClick: () => {\n                    handleClose();\n                },\n            }, () => slots.default && slots.default())\n            : (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCloseButton, {\n                ...props,\n                onClick: () => {\n                    handleClose();\n                },\n            });\n    },\n});\n\nconst CToaster = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CToaster',\n    props: {\n        /**\n         * Describes the placement of component.\n         *\n         * @values 'top-start', 'top', 'top-end', 'middle-start', 'middle', 'middle-end', 'bottom-start', 'bottom', 'bottom-end'\n         */\n        placement: {\n            type: String,\n            default: undefined,\n            require: false,\n            validator: (value) => {\n                return [\n                    'top-start',\n                    'top-center',\n                    'top-end',\n                    'middle-start',\n                    'middle-center',\n                    'middle-end',\n                    'bottom-start',\n                    'bottom-center',\n                    'bottom-end',\n                ].includes(value);\n            },\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n            class: [\n                'toaster toast-container p-3',\n                {\n                    'position-fixed': props.placement,\n                    'top-0': props.placement && props.placement.includes('top'),\n                    'top-50 translate-middle-y': props.placement && props.placement.includes('middle'),\n                    'bottom-0': props.placement && props.placement.includes('bottom'),\n                    'start-0': props.placement && props.placement.includes('start'),\n                    'start-50 translate-middle-x': props.placement && props.placement.includes('center'),\n                    'end-0': props.placement && props.placement.includes('end'),\n                },\n            ],\n        }, slots.default && slots.default());\n    },\n});\n\nconst CToastHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CToastHeader',\n    props: {\n        /**\n         * Automatically add a close button to the header.\n         */\n        closeButton: {\n            type: Boolean,\n            require: false,\n        },\n    },\n    emits: [\n        /**\n         * Event called after clicking the close button.\n         */\n        'close',\n    ],\n    setup(props, { slots, emit }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'toast-header' }, [\n            slots.default && slots.default(),\n            props.closeButton &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CToastClose, {\n                    onClose: () => emit('close'),\n                }),\n        ]);\n    },\n});\n\nconst CToastPlugin = {\n    install: (app) => {\n        app.component(CToast.name, CToast);\n        app.component(CToastBody.name, CToastBody);\n        app.component(CToastClose.name, CToastClose);\n        app.component(CToaster.name, CToaster);\n        app.component(CToastHeader.name, CToastHeader);\n    },\n};\n\nconst CTooltip = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CTooltip',\n    props: {\n        /**\n         * Content for your component. If you want to pass non-string value please use dedicated slot `<template #content>...</template>`\n         */\n        content: {\n            type: String,\n            default: undefined,\n            required: false,\n        },\n        /**\n         * Offset of the tooltip relative to its target.\n         */\n        offset: {\n            type: Array,\n            default: () => [0, 0],\n            required: false,\n        },\n        /**\n         * Describes the placement of your component after Popper.js has applied all the modifiers that may have flipped or altered the originally provided placement property.\n         */\n        placement: {\n            type: String,\n            default: 'top',\n            required: false,\n            validator: (value) => {\n                return ['top', 'right', 'bottom', 'left'].includes(value);\n            },\n        },\n        /**\n         * Sets which event handlers you’d like provided to your toggle prop. You can specify one trigger or an array of them.\n         *\n         * @values 'click', 'focus', 'hover'\n         */\n        trigger: {\n            type: [String, Array],\n            default: 'hover',\n            required: false,\n            validator: (value) => {\n                if (typeof value === 'string') {\n                    return ['click', 'focus', 'hover'].includes(value);\n                }\n                if (Array.isArray(value)) {\n                    return value.every((e) => ['click', 'focus', 'hover'].includes(e));\n                }\n                return false;\n            },\n        },\n        /**\n         * Toggle the visibility of tooltip component.\n         */\n        visible: Boolean,\n    },\n    emits: [\n        /**\n         * Callback fired when the component requests to be hidden.\n         */\n        'hide',\n        /**\n         * Callback fired when the component requests to be shown.\n         */\n        'show',\n    ],\n    setup(props, { slots, emit }) {\n        const togglerRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const tooltipRef = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const popper = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)();\n        const visible = (0,vue__WEBPACK_IMPORTED_MODULE_0__.ref)(props.visible);\n        const handleEnter = (el, done) => {\n            emit('show');\n            initPopper();\n            el.classList.add('show');\n            executeAfterTransition(() => done(), el);\n        };\n        const handleLeave = (el, done) => {\n            emit('hide');\n            el.classList.remove('show');\n            executeAfterTransition(() => {\n                done();\n                destroyPopper();\n            }, el);\n        };\n        const handleToggle = (event) => {\n            togglerRef.value = event.target;\n            visible.value = !visible.value;\n        };\n        const initPopper = () => {\n            if (togglerRef.value) {\n                popper.value = createPopper(togglerRef.value, tooltipRef.value, {\n                    placement: props.placement,\n                    modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: props.offset,\n                            },\n                        },\n                    ],\n                });\n            }\n        };\n        const destroyPopper = () => {\n            if (popper.value) {\n                popper.value.destroy();\n            }\n            popper.value = undefined;\n        };\n        return () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Teleport, {\n                to: 'body',\n            }, (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(vue__WEBPACK_IMPORTED_MODULE_0__.Transition, {\n                onEnter: (el, done) => handleEnter(el, done),\n                onLeave: (el, done) => handleLeave(el, done),\n            }, () => visible.value &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'tooltip fade bs-tooltip-auto',\n                    ref: tooltipRef,\n                    role: 'tooltip',\n                }, [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'tooltip-arrow', 'data-popper-arrow': '' }),\n                    (props.content || slots.content) &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'tooltip-inner' }, {\n                            default: () => (slots.content && slots.content()) || props.content,\n                        }),\n                ]))),\n            slots.toggler &&\n                slots.toggler({\n                    on: {\n                        click: (event) => props.trigger.includes('click') && handleToggle(event),\n                        blur: (event) => props.trigger.includes('focus') && handleToggle(event),\n                        focus: (event) => props.trigger.includes('focus') && handleToggle(event),\n                        mouseenter: (event) => props.trigger.includes('hover') && handleToggle(event),\n                        mouseleave: (event) => props.trigger.includes('hover') && handleToggle(event),\n                    },\n                }),\n        ];\n    },\n});\n\nconst CTooltipPlugin = {\n    install: (app) => {\n        app.component(CTooltip.name, CTooltip);\n    },\n};\n\nconst CWidgetStatsA = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsA',\n    props: {\n        color: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Value for your component. If you want to pass non-string or non-number value please use dedicated slot `<template #value>...</template>`\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            require: false,\n        },\n    },\n    /**\n     * Location for action component, ex. `<CDropdown>`.\n     *\n     * @slot action\n     */\n    /**\n     * Location for chart component.\n     *\n     * @slot chart\n     */\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {\n            class: [\n                { [`bg-${props.color}`]: props.color, 'text-high-emphasis-inverse': props.color },\n            ],\n        }, () => [\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n                class: 'pb-0 d-flex justify-content-between align-items-start',\n            }, () => [\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {}, [\n                    (props.value || slots.value) &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'fs-4 fw-semibold' }, {\n                            default: () => (slots.value && slots.value()) || props.value,\n                        }),\n                    (props.title || slots.title) &&\n                        (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {}, {\n                            default: () => (slots.title && slots.title()) || props.title,\n                        }),\n                ]),\n                /**\n                 * @slot Location for action component, ex. `<CDropdown>`.\n                 */\n                slots.action && slots.action(),\n            ]),\n            /**\n             * @slot Location for chart component.\n             */\n            slots.chart && slots.chart(),\n            slots.default && slots.default(),\n        ]);\n    },\n});\n\n/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nfunction t(){return t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n]);}return e},t.apply(this,arguments)}function r(e,t){if(null==e)return {};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)t.indexOf(r=o[n])>=0||(i[r]=e[r]);return i}const n={silent:!1,logLevel:\"warn\"},i=[\"validator\"],o=Object.prototype,a=o.toString,s=o.hasOwnProperty,u=/^\\s*function (\\w+)/;function l(e){var t;const r=null!==(t=null==e?void 0:e.type)&&void 0!==t?t:e;if(r){const e=r.toString().match(u);return e?e[1]:\"\"}return \"\"}const c=isPlainObject,f=e=>e;let d=f;if(true){const e=\"undefined\"!=typeof console;d=e?function(e,t=n.logLevel){!1===n.silent&&console[t](`[VueTypes warn]: ${e}`);}:f;}const p=(e,t)=>s.call(e,t),y=Number.isInteger||function(e){return \"number\"==typeof e&&isFinite(e)&&Math.floor(e)===e},v=Array.isArray||function(e){return \"[object Array]\"===a.call(e)},h=e=>\"[object Function]\"===a.call(e),b=e=>c(e)&&p(e,\"_vueTypes_name\"),g=e=>c(e)&&(p(e,\"type\")||[\"_vueTypes_name\",\"validator\",\"default\",\"required\"].some(t=>p(e,t)));function O(e,t){return Object.defineProperty(e.bind(t),\"__original\",{value:e})}function m(e,t,r=!1){let n,i=!0,o=\"\";n=c(e)?e:{type:e};const a=b(n)?n._vueTypes_name+\" - \":\"\";if(g(n)&&null!==n.type){if(void 0===n.type||!0===n.type)return i;if(!n.required&&void 0===t)return i;v(n.type)?(i=n.type.some(e=>!0===m(e,t,!0)),o=n.type.map(e=>l(e)).join(\" or \")):(o=l(n),i=\"Array\"===o?v(t):\"Object\"===o?c(t):\"String\"===o||\"Number\"===o||\"Boolean\"===o||\"Function\"===o?function(e){if(null==e)return \"\";const t=e.constructor.toString().match(u);return t?t[1]:\"\"}(t)===o:t instanceof n.type);}if(!i){const e=`${a}value \"${t}\" should be of type \"${o}\"`;return !1===r?(d(e),!1):e}if(p(n,\"validator\")&&h(n.validator)){const e=d,o=[];if(d=e=>{o.push(e);},i=n.validator(t),d=e,!i){const e=(o.length>1?\"* \":\"\")+o.join(\"\\n* \");return o.length=0,!1===r?(d(e),i):e}}return i}function j(e,t){const r=Object.defineProperties(t,{_vueTypes_name:{value:e,writable:!0},isRequired:{get(){return this.required=!0,this}},def:{value(e){return void 0===e?(p(this,\"default\")&&delete this.default,this):h(e)||!0===m(this,e,!0)?(this.default=v(e)?()=>[...e]:c(e)?()=>Object.assign({},e):e,this):(d(`${this._vueTypes_name} - invalid default value: \"${e}\"`),this)}}}),{validator:n}=r;return h(n)&&(r.validator=O(n,r)),r}function _(e,t){const r=j(e,t);return Object.defineProperty(r,\"validate\",{value(e){return h(this.validator)&&d(`${this._vueTypes_name} - calling .validate() will overwrite the current custom validator function. Validator info:\\n${JSON.stringify(this)}`),this.validator=O(e,this),this}})}function T(e,t,n){const o=function(e){const t={};return Object.getOwnPropertyNames(e).forEach(r=>{t[r]=Object.getOwnPropertyDescriptor(e,r);}),Object.defineProperties({},t)}(t);if(o._vueTypes_name=e,!c(n))return o;const{validator:a}=n,s=r(n,i);if(h(a)){let{validator:e}=o;e&&(e=null!==(l=(u=e).__original)&&void 0!==l?l:u),o.validator=O(e?function(t){return e.call(this,t)&&a.call(this,t)}:a,o);}var u,l;return Object.assign(o,s)}function $(e){return e.replace(/^(?!\\s*$)/gm,\"  \")}const w=()=>_(\"any\",{}),P=()=>_(\"function\",{type:Function}),x=()=>_(\"boolean\",{type:Boolean}),E=()=>_(\"string\",{type:String}),N=()=>_(\"number\",{type:Number}),q=()=>_(\"array\",{type:Array}),A=()=>_(\"object\",{type:Object}),V=()=>j(\"integer\",{type:Number,validator:e=>y(e)}),S=()=>j(\"symbol\",{validator:e=>\"symbol\"==typeof e});function k(e,t=\"custom validation failed\"){if(\"function\"!=typeof e)throw new TypeError(\"[VueTypes error]: You must provide a function as argument\");return j(e.name||\"<<anonymous function>>\",{type:null,validator(r){const n=e(r);return n||d(`${this._vueTypes_name} - ${t}`),n}})}function D(e){if(!v(e))throw new TypeError(\"[VueTypes error]: You must provide an array as argument.\");const t=`oneOf - value should be one of \"${e.join('\", \"')}\".`,r=e.reduce((e,t)=>{if(null!=t){const r=t.constructor;-1===e.indexOf(r)&&e.push(r);}return e},[]);return j(\"oneOf\",{type:r.length>0?r:void 0,validator(r){const n=-1!==e.indexOf(r);return n||d(t),n}})}function L(e){if(!v(e))throw new TypeError(\"[VueTypes error]: You must provide an array as argument\");let t=!1,r=[];for(let n=0;n<e.length;n+=1){const i=e[n];if(g(i)){if(b(i)&&\"oneOf\"===i._vueTypes_name&&i.type){r=r.concat(i.type);continue}if(h(i.validator)&&(t=!0),!0===i.type||!i.type){d('oneOfType - invalid usage of \"true\" or \"null\" as types.');continue}r=r.concat(i.type);}else r.push(i);}r=r.filter((e,t)=>r.indexOf(e)===t);const n=r.length>0?r:null;return j(\"oneOfType\",t?{type:n,validator(t){const r=[],n=e.some(e=>{const n=m(b(e)&&\"oneOf\"===e._vueTypes_name?e.type||null:e,t,!0);return \"string\"==typeof n&&r.push(n),!0===n});return n||d(`oneOfType - provided value does not match any of the ${r.length} passed-in validators:\\n${$(r.join(\"\\n\"))}`),n}}:{type:n})}function F(e){return j(\"arrayOf\",{type:Array,validator(t){let r=\"\";const n=t.every(t=>(r=m(e,t,!0),!0===r));return n||d(`arrayOf - value validation error:\\n${$(r)}`),n}})}function Y(e){return j(\"instanceOf\",{type:e})}function B(e){return j(\"objectOf\",{type:Object,validator(t){let r=\"\";const n=Object.keys(t).every(n=>(r=m(e,t[n],!0),!0===r));return n||d(`objectOf - value validation error:\\n${$(r)}`),n}})}function I(e){const t=Object.keys(e),r=t.filter(t=>{var r;return !(null===(r=e[t])||void 0===r||!r.required)}),n=j(\"shape\",{type:Object,validator(n){if(!c(n))return !1;const i=Object.keys(n);if(r.length>0&&r.some(e=>-1===i.indexOf(e))){const e=r.filter(e=>-1===i.indexOf(e));return d(1===e.length?`shape - required property \"${e[0]}\" is not defined.`:`shape - required properties \"${e.join('\", \"')}\" are not defined.`),!1}return i.every(r=>{if(-1===t.indexOf(r))return !0===this._vueTypes_isLoose||(d(`shape - shape definition does not include a \"${r}\" property. Allowed keys: \"${t.join('\", \"')}\".`),!1);const i=m(e[r],n[r],!0);return \"string\"==typeof i&&d(`shape - \"${r}\" property validation error:\\n ${$(i)}`),!0===i})}});return Object.defineProperty(n,\"_vueTypes_isLoose\",{writable:!0,value:!1}),Object.defineProperty(n,\"loose\",{get(){return this._vueTypes_isLoose=!0,this}}),n}const J=[\"name\",\"validate\",\"getter\"],M=/*#__PURE__*/(()=>{var e,t;return t=e=class{static get any(){return w()}static get func(){return P().def(this.defaults.func)}static get bool(){return x().def(this.defaults.bool)}static get string(){return E().def(this.defaults.string)}static get number(){return N().def(this.defaults.number)}static get array(){return q().def(this.defaults.array)}static get object(){return A().def(this.defaults.object)}static get integer(){return V().def(this.defaults.integer)}static get symbol(){return S()}static extend(e){if(v(e))return e.forEach(e=>this.extend(e)),this;const{name:t,validate:n=!1,getter:i=!1}=e,o=r(e,J);if(p(this,t))throw new TypeError(`[VueTypes error]: Type \"${t}\" already defined`);const{type:a}=o;if(b(a))return delete o.type,Object.defineProperty(this,t,i?{get:()=>T(t,a,o)}:{value(...e){const r=T(t,a,o);return r.validator&&(r.validator=r.validator.bind(r,...e)),r}});let s;return s=i?{get(){const e=Object.assign({},o);return n?_(t,e):j(t,e)},enumerable:!0}:{value(...e){const r=Object.assign({},o);let i;return i=n?_(t,r):j(t,r),r.validator&&(i.validator=r.validator.bind(i,...e)),i},enumerable:!0},Object.defineProperty(this,t,s)}},e.defaults={},e.sensibleDefaults=void 0,e.config=n,e.custom=k,e.oneOf=D,e.instanceOf=Y,e.oneOfType=L,e.arrayOf=F,e.objectOf=B,e.shape=I,e.utils={validate:(e,t)=>!0===m(t,e,!0),toType:(e,t,r=!1)=>r?_(e,t):j(e,t)},t})();function R(e={func:()=>{},bool:!0,string:\"\",number:0,array:()=>[],object:()=>({}),integer:0}){var r,n;return n=r=class extends M{static get sensibleDefaults(){return t({},this.defaults)}static set sensibleDefaults(r){this.defaults=!1!==r?t({},!0!==r?r:e):{};}},r.defaults=t({},e),n}class z extends(R()){}\n\nconst CWidgetStatsB = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsB',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Colors have been inverted from their default dark shade.\n         */\n        inverse: {\n            type: Boolean,\n            default: undefined,\n            require: false,\n        },\n        progress: I({\n            /**\n             * Sets the color context of the progress bar to one of CoreUI’s themed colors\n             *\n             * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n             */\n            color: Color,\n            /**\n             * The percent to progress the ProgressBar (out of 100).\n             */\n            value: {\n                type: Number,\n                default: 0,\n            },\n        }),\n        /**\n         * Helper text for your component. If you want to pass non-string value please use dedicated slot `<template #text>...</template>`\n         */\n        text: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Value for your component. If you want to pass non-string or non-number value please use dedicated slot `<template #value>...</template>`\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            require: false,\n        },\n    },\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {\n            class: [\n                {\n                    'text-high-emphasis-inverse': props.inverse,\n                },\n            ],\n            color: props.color,\n        }, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n            class: 'card-body',\n        }, () => [\n            (props.value || slots.value) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'fs-4 fw-semibold',\n                }, {\n                    default: () => (slots.value && slots.value()) || props.value,\n                }),\n            (props.title || slots.title) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {}, {\n                    default: () => (slots.title && slots.title()) || props.title,\n                }),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CProgress, {\n                class: 'my-2',\n                ...(props.progress && props.progress.color && { color: props.progress.color }),\n                height: 4,\n                ...(props.progress && props.progress.value && { value: props.progress.value }),\n                white: props.inverse,\n            }),\n            (props.text || slots.text) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('small', {\n                    class: [\n                        props.inverse ? 'text-medium-emphasis-inverse' : 'text-medium-emphasis',\n                    ],\n                }, {\n                    default: () => (slots.text && slots.text()) || props.text,\n                }),\n        ]));\n    },\n});\n\nconst CWidgetStatsC = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsC',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Colors have been inverted from their default dark shade.\n         */\n        inverse: {\n            type: Boolean,\n            default: undefined,\n            require: false,\n        },\n        progress: I({\n            /**\n             * Sets the color context of the progress bar to one of CoreUI’s themed colors\n             *\n             * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n             */\n            color: Color,\n            /**\n             * The percent to progress the ProgressBar (out of 100).\n             */\n            value: {\n                type: Number,\n                default: 0,\n            },\n        }),\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Value for your component. If you want to pass non-string or non-number value please use dedicated slot `<template #value>...</template>`\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            require: false,\n        },\n    },\n    /**\n     * Location for icon component.\n     *\n     * @slot icon\n     */\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {\n            class: [\n                {\n                    ['text-white']: props.inverse,\n                },\n            ],\n            color: props.color,\n        }, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n            class: 'card-body',\n        }, () => [\n            slots.icon &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: [\n                        'text-end mb-4',\n                        props.inverse ? 'text-medium-emphasis-inverse' : 'text-medium-emphasis',\n                    ],\n                }, slots.icon && slots.icon()),\n            (props.value || slots.value) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'fs-4 fw-semibold',\n                }, {\n                    default: () => (slots.value && slots.value()) || props.value,\n                }),\n            (props.title || slots.title) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: [\n                        'text-uppercase fw-semibold small',\n                        props.inverse ? 'text-medium-emphasis-inverse' : 'text-medium-emphasis',\n                    ],\n                }, {\n                    default: () => (slots.title && slots.title()) || props.title,\n                }),\n            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CProgress, {\n                class: 'my-2',\n                ...(props.progress && props.progress.color && { color: props.progress.color }),\n                height: 4,\n                ...(props.progress && props.progress.value && { value: props.progress.value }),\n                white: props.inverse,\n            }),\n        ]));\n    },\n});\n\nconst CWidgetStatsD = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsD',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Values and titles for your component.\n         */\n        values: {\n            type: Array,\n            default: () => [],\n            require: false,\n        },\n    },\n    /**\n     * Location for icon component, ex. `<CDropdown>`.\n     *\n     * @slot icon\n     */\n    /**\n     * Location for chart component.\n     *\n     * @slot chart\n     */\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {}, {\n            default: () => [\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardHeader, {\n                    class: [\n                        'position-relative d-flex justify-content-center align-items-center',\n                        {\n                            [`bg-${props.color}`]: props.color,\n                        },\n                    ],\n                }, () => [slots.icon && slots.icon(), slots.chart && slots.chart()]),\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n                    class: 'row text-center',\n                }, {\n                    default: () => props.values &&\n                        props.values.map((value, index) => [\n                            index % 2 !== 0 && (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', { class: 'vr' }),\n                            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCol, {}, {\n                                default: () => [\n                                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCol, { class: 'fs-5 fw-semibold' }, () => value.value),\n                                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCol, { class: 'text-uppercase text-medium-emphasis small' }, () => value.title),\n                                ],\n                            }),\n                        ]),\n                }),\n            ],\n        });\n    },\n});\n\nconst CWidgetStatsE = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsE',\n    props: {\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Value for your component. If you want to pass non-string or non-number value please use dedicated slot `<template #value>...</template>`\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            require: false,\n        },\n    },\n    /**\n     * Location for chart component.\n     *\n     * @slot chart\n     */\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {}, () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n            class: 'text-center',\n        }, () => [\n            (props.title || slots.title) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'text-muted small text-uppercase font-weight-bold',\n                }, {\n                    default: () => (slots.title && slots.title()) || props.title,\n                }),\n            (props.value || slots.value) &&\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                    class: 'h2 py-3',\n                }, {\n                    default: () => (slots.value && slots.value()) || props.value,\n                }),\n            slots.chart && slots.chart(),\n            slots.default && slots.default(),\n        ]));\n    },\n});\n\nconst CWidgetStatsF = (0,vue__WEBPACK_IMPORTED_MODULE_0__.defineComponent)({\n    name: 'CWidgetStatsF',\n    props: {\n        /**\n         * Sets the color context of the component to one of CoreUI’s themed colors.\n         *\n         * @values 'primary', 'secondary', 'success', 'danger', 'warning', 'info', 'dark', 'light'\n         */\n        color: Color,\n        /**\n         * Set padding of your component.\n         */\n        padding: {\n            type: Boolean,\n            default: true,\n        },\n        /**\n         * Title for your component. If you want to pass non-string value please use dedicated slot `<template #title>...</template>`\n         */\n        title: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Helper text for your component. If you want to pass non-string value please use dedicated slot `<template #text>...</template>`\n         */\n        text: {\n            type: String,\n            default: undefined,\n            require: false,\n        },\n        /**\n         * Value for your component. If you want to pass non-string or non-number value please use dedicated slot `<template #value>...</template>`\n         */\n        value: {\n            type: [Number, String],\n            default: 0,\n            require: false,\n        },\n    },\n    /**\n     * Location for icon component.\n     *\n     * @slot icon\n     */\n    setup(props, { slots }) {\n        return () => (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCard, {}, {\n            default: () => [\n                (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardBody, {\n                    class: ['d-flex align-items-center', props.padding === false && 'p-0'],\n                }, () => [\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                        class: [\n                            'me-3',\n                            'text-white',\n                            `bg-${props.color}`,\n                            props.padding ? 'p-3' : 'p-4',\n                        ],\n                    }, (slots.default && slots.default()) || (slots.icon && slots.icon())),\n                    (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {}, [\n                        (props.value || slots.value) &&\n                            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                                class: [`fs-6 fw-semibold text-${props.color}`],\n                            }, {\n                                default: () => (slots.value && slots.value()) || props.value,\n                            }),\n                        (props.title || slots.title) &&\n                            (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)('div', {\n                                class: 'text-medium-emphasis text-uppercase fw-semibold small',\n                            }, {\n                                default: () => (slots.title && slots.title()) || props.title,\n                            }),\n                    ]),\n                ]),\n                slots.footer && (0,vue__WEBPACK_IMPORTED_MODULE_0__.h)(CCardFooter, {}, () => slots.footer && slots.footer()),\n            ],\n        });\n    },\n});\n\nconst CWidgetsStatsPlugin = {\n    install: (app) => {\n        app.component(CWidgetStatsA.name, CWidgetStatsA);\n        app.component(CWidgetStatsB.name, CWidgetStatsB);\n        app.component(CWidgetStatsC.name, CWidgetStatsC);\n        app.component(CWidgetStatsD.name, CWidgetStatsD);\n        app.component(CWidgetStatsE.name, CWidgetStatsE);\n        app.component(CWidgetStatsF.name, CWidgetStatsF);\n    },\n};\n\nvar Components = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    CAccordionPlugin: CAccordionPlugin,\n    CAccordion: CAccordion,\n    CAccordionBody: CAccordionBody,\n    CAccordionButton: CAccordionButton,\n    CAccordionCollapse: CAccordionCollapse,\n    CAccordionHeader: CAccordionHeader,\n    CAccordionItem: CAccordionItem,\n    CAlertPlugin: CAlertPlugin,\n    CAlert: CAlert,\n    CAlertHeading: CAlertHeading,\n    CAlertLink: CAlertLink,\n    CAvatarPlugin: CAvatarPlugin,\n    CAvatar: CAvatar,\n    CBackdropPlugin: CBackdropPlugin,\n    CBackdrop: CBackdrop,\n    CBadge: CBadge,\n    CBadgePlugin: CBadgePlugin,\n    CBreadcrumbPlugin: CBreadcrumbPlugin,\n    CBreadcrumb: CBreadcrumb,\n    CBreadcrumbItem: CBreadcrumbItem,\n    CButtonPlugin: CButtonPlugin,\n    CButton: CButton,\n    CButtonGroupPlugin: CButtonGroupPlugin,\n    CButtonToolbar: CButtonToolbar,\n    CButtonGroup: CButtonGroup,\n    CCalloutPlugin: CCalloutPlugin,\n    CCallout: CCallout,\n    CCardPlugin: CCardPlugin,\n    CCard: CCard,\n    CCardBody: CCardBody,\n    CCardFooter: CCardFooter,\n    CCardGroup: CCardGroup,\n    CCardHeader: CCardHeader,\n    CCardImage: CCardImage,\n    CCardImageOverlay: CCardImageOverlay,\n    CCardLink: CCardLink,\n    CCardSubtitle: CCardSubtitle,\n    CCardText: CCardText,\n    CCardTitle: CCardTitle,\n    CCarouselPlugin: CCarouselPlugin,\n    CCarousel: CCarousel,\n    CCarouselCaption: CCarouselCaption,\n    CCarouselItem: CCarouselItem,\n    CCloseButtonPlugin: CCloseButtonPlugin,\n    CCloseButton: CCloseButton,\n    CCollapsePlugin: CCollapsePlugin,\n    CCollapse: CCollapse,\n    CDropdownPlugin: CDropdownPlugin,\n    CDropdown: CDropdown,\n    CDropdownItem: CDropdownItem,\n    CDropdownHeader: CDropdownHeader,\n    CDropdownDivider: CDropdownDivider,\n    CDropdownMenu: CDropdownMenu,\n    CDropdownToggle: CDropdownToggle,\n    CFooterPlugin: CFooterPlugin,\n    CFooter: CFooter,\n    CFormPlugin: CFormPlugin,\n    CForm: CForm,\n    CFormCheck: CFormCheck,\n    CFormFeedback: CFormFeedback,\n    CFormFloating: CFormFloating,\n    CFormInput: CFormInput,\n    CFormLabel: CFormLabel,\n    CFormRange: CFormRange,\n    CFormSelect: CFormSelect,\n    CFormSwitch: CFormSwitch,\n    CFormText: CFormText,\n    CFormTextarea: CFormTextarea,\n    CInputGroup: CInputGroup,\n    CInputGroupText: CInputGroupText,\n    CGridPlugin: CGridPlugin,\n    CCol: CCol,\n    CContainer: CContainer,\n    CRow: CRow,\n    CHeaderPlugin: CHeaderPlugin,\n    CHeader: CHeader,\n    CHeaderBrand: CHeaderBrand,\n    CHeaderDivider: CHeaderDivider,\n    CHeaderNav: CHeaderNav,\n    CHeaderText: CHeaderText,\n    CHeaderToggler: CHeaderToggler,\n    CImagePlugin: CImagePlugin,\n    CImage: CImage,\n    CCLinkPlugin: CCLinkPlugin,\n    CLink: CLink,\n    CListGroupPlugin: CListGroupPlugin,\n    CListGroup: CListGroup,\n    CListGroupItem: CListGroupItem,\n    CModalPlugin: CModalPlugin,\n    CModal: CModal,\n    CModalBody: CModalBody,\n    CModalFooter: CModalFooter,\n    CModalHeader: CModalHeader,\n    CModalTitle: CModalTitle,\n    CNavPlugin: CNavPlugin,\n    CNav: CNav,\n    CNavGroup: CNavGroup,\n    CNavGroupItems: CNavGroupItems,\n    CNavItem: CNavItem,\n    CNavLink: CNavLink,\n    CNavTitle: CNavTitle,\n    CNavbarPlugin: CNavbarPlugin,\n    CNavbar: CNavbar,\n    CNavbarBrand: CNavbarBrand,\n    CNavbarNav: CNavbarNav,\n    CNavbarText: CNavbarText,\n    CNavbarToggler: CNavbarToggler,\n    COffcanvasPlugin: COffcanvasPlugin,\n    COffcanvas: COffcanvas,\n    COffcanvasBody: COffcanvasBody,\n    COffcanvasHeader: COffcanvasHeader,\n    COffcanvasTitle: COffcanvasTitle,\n    CPaginationPlugin: CPaginationPlugin,\n    CPagination: CPagination,\n    CPaginationItem: CPaginationItem,\n    CPlaceholderPlugin: CPlaceholderPlugin,\n    CPlaceholder: CPlaceholder,\n    CProgressPlugin: CProgressPlugin,\n    CProgress: CProgress,\n    CProgressBar: CProgressBar,\n    CPopoverPlugin: CPopoverPlugin,\n    CPopover: CPopover,\n    CSidebarPlugin: CSidebarPlugin,\n    CSidebar: CSidebar,\n    CSidebarBrand: CSidebarBrand,\n    CSidebarFooter: CSidebarFooter,\n    CSidebarHeader: CSidebarHeader,\n    CSidebarNav: CSidebarNav,\n    CSidebarToggler: CSidebarToggler,\n    CSpinnerPlugin: CSpinnerPlugin,\n    CSpinner: CSpinner,\n    CTablePlugin: CTablePlugin,\n    CTable: CTable,\n    CTableBody: CTableBody,\n    CTableCaption: CTableCaption,\n    CTableDataCell: CTableDataCell,\n    CTableFoot: CTableFoot,\n    CTableHead: CTableHead,\n    CTableHeaderCell: CTableHeaderCell,\n    CTableRow: CTableRow,\n    CTabsPlugin: CTabsPlugin,\n    CTabContent: CTabContent,\n    CTabPane: CTabPane,\n    CToastPlugin: CToastPlugin,\n    CToast: CToast,\n    CToastBody: CToastBody,\n    CToastClose: CToastClose,\n    CToaster: CToaster,\n    CToastHeader: CToastHeader,\n    CTooltipPlugin: CTooltipPlugin,\n    CTooltip: CTooltip,\n    CWidgetsStatsPlugin: CWidgetsStatsPlugin,\n    CWidgetStatsA: CWidgetStatsA,\n    CWidgetStatsB: CWidgetStatsB,\n    CWidgetStatsC: CWidgetStatsC,\n    CWidgetStatsD: CWidgetStatsD,\n    CWidgetStatsE: CWidgetStatsE,\n    CWidgetStatsF: CWidgetStatsF\n});\n\nconst BREAKPOINTS = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nvar vcplaceholder = {\n    name: 'c-placeholder',\n    mounted(el, binding) {\n        const value = binding.value;\n        el.classList.add(value.animation ? `placeholder-${value.animation}` : 'placeholder');\n        BREAKPOINTS.forEach((bp) => {\n            const breakpoint = value[bp];\n            const infix = bp === 'xs' ? '' : `-${bp}`;\n            if (typeof breakpoint === 'number') {\n                el.classList.add(`col${infix}-${breakpoint}`);\n            }\n            if (typeof breakpoint === 'boolean') {\n                el.classList.add(`col${infix}`);\n            }\n        });\n    },\n};\n\nconst getUID$1 = (prefix) => {\n    do {\n        prefix += Math.floor(Math.random() * 1000000);\n    } while (document.getElementById(prefix));\n    return prefix;\n};\nconst createPopoverElement = (id, header, content) => {\n    const popover = document.createElement('div');\n    popover.id = id;\n    popover.classList.add('popover', 'bs-popover-auto', 'fade');\n    popover.setAttribute('role', 'popover');\n    popover.innerHTML = `<div class=\"popover-arrow\" data-popper-arrow></div>\n     <div class=\"popover-header\">${header}</div>\n     <div class=\"popover-body\" id=\"\">${content}</div>`;\n    return popover;\n};\nconst addPopoverElement = (popover, el, popperOptions) => {\n    document.body.appendChild(popover);\n    createPopper(el, popover, popperOptions);\n    setTimeout(() => {\n        popover.classList.add('show');\n    }, 1);\n};\nconst removePopoverElement = (popover) => {\n    popover.classList.remove('show');\n    setTimeout(() => {\n        document.body.removeChild(popover);\n    }, 300);\n};\nconst togglePopoverElement = (popover, el, popperOptions) => {\n    const popperElement = document.getElementById(popover.id);\n    if (popperElement && popperElement.classList.contains('show')) {\n        removePopoverElement(popover);\n        return;\n    }\n    addPopoverElement(popover, el, popperOptions);\n};\nvar vcpopover = {\n    name: 'c-popover',\n    uid: '',\n    mounted(el, binding) {\n        const value = binding.value;\n        const content = typeof value === 'string' ? value : value.content ? value.content : '';\n        const header = value.header ? value.header : '';\n        const trigger = value.trigger ? value.trigger : 'click';\n        // Popper Config\n        const offset = value.offset ? value.offset : [0, 8];\n        const placement = value.placement ? value.placement : 'top';\n        const popperOptions = {\n            placement: placement,\n            modifiers: [\n                {\n                    name: 'offset',\n                    options: {\n                        offset: offset,\n                    },\n                },\n            ],\n        };\n        const popoverUID = getUID$1('popover');\n        binding.arg = popoverUID;\n        const popover = createPopoverElement(popoverUID, header, content);\n        trigger.includes('click') &&\n            el.addEventListener('click', () => {\n                togglePopoverElement(popover, el, popperOptions);\n            });\n        if (trigger.includes('focus')) {\n            el.addEventListener('focus', () => {\n                addPopoverElement(popover, el, popperOptions);\n            });\n            el.addEventListener('blur', () => {\n                removePopoverElement(popover);\n            });\n        }\n        if (trigger.includes('hover')) {\n            el.addEventListener('mouseenter', () => {\n                addPopoverElement(popover, el, popperOptions);\n            });\n            el.addEventListener('mouseleave', () => {\n                removePopoverElement(popover);\n            });\n        }\n    },\n    unmounted(binding) {\n        const popover = binding.arg && document.getElementById(binding.arg);\n        popover && popover.remove();\n    },\n};\n\nconst getUID = (prefix) => {\n    do {\n        prefix += Math.floor(Math.random() * 1000000);\n    } while (document.getElementById(prefix));\n    return prefix;\n};\nconst createTooltipElement = (id, content) => {\n    const tooltip = document.createElement('div');\n    tooltip.id = id;\n    tooltip.classList.add('tooltip', 'bs-tooltip-auto', 'fade');\n    tooltip.setAttribute('role', 'tooltip');\n    tooltip.innerHTML = `<div class=\"tooltip-arrow\" data-popper-arrow></div>\n     <div class=\"tooltip-inner\" id=\"\">${content}</div>`;\n    return tooltip;\n};\nconst addTooltipElement = (tooltip, el, popperOptions) => {\n    document.body.appendChild(tooltip);\n    createPopper(el, tooltip, popperOptions);\n    setTimeout(() => {\n        tooltip.classList.add('show');\n    }, 1);\n};\nconst removeTooltipElement = (tooltip) => {\n    tooltip.classList.remove('show');\n    setTimeout(() => {\n        document.body.removeChild(tooltip);\n    }, 300);\n};\nconst toggleTooltipElement = (tooltip, el, popperOptions) => {\n    const popperElement = document.getElementById(tooltip.id);\n    if (popperElement && popperElement.classList.contains('show')) {\n        removeTooltipElement(tooltip);\n        return;\n    }\n    addTooltipElement(tooltip, el, popperOptions);\n};\nvar vctooltip = {\n    mounted(el, binding) {\n        const value = binding.value;\n        const content = typeof value === 'string' ? value : value.content ? value.content : '';\n        const trigger = value.trigger ? value.trigger : 'hover';\n        // Popper Config\n        const offset = value.offset ? value.offset : [0, 0];\n        const placement = value.placement ? value.placement : 'top';\n        const popperOptions = {\n            placement: placement,\n            modifiers: [\n                {\n                    name: 'offset',\n                    options: {\n                        offset: offset,\n                    },\n                },\n            ],\n        };\n        const tooltipUID = getUID('tooltip');\n        binding.arg = tooltipUID;\n        const tooltip = createTooltipElement(tooltipUID, content);\n        trigger.includes('click') &&\n            el.addEventListener('click', () => {\n                toggleTooltipElement(tooltip, el, popperOptions);\n            });\n        if (trigger.includes('focus')) {\n            el.addEventListener('focus', () => {\n                addTooltipElement(tooltip, el, popperOptions);\n            });\n            el.addEventListener('blur', () => {\n                removeTooltipElement(tooltip);\n            });\n        }\n        if (trigger.includes('hover')) {\n            el.addEventListener('mouseenter', () => {\n                addTooltipElement(tooltip, el, popperOptions);\n            });\n            el.addEventListener('mouseleave', () => {\n                removeTooltipElement(tooltip);\n            });\n        }\n    },\n    beforeUnmount(binding) {\n        const tooltip = binding.arg && document.getElementById(binding.arg);\n        tooltip && tooltip.remove();\n    },\n};\n\nconst removeKeysFromObject = (object, keys) => {\n    return Object.entries(object).reduce((obj, [key, value]) => {\n        if (!keys.includes(key) && !keys.includes(value.name)) {\n            obj[key] = value;\n        }\n        return obj;\n    }, {});\n};\nconst CoreuiVue = {\n    install: (app, options) => {\n        let pluginComponents = Components;\n        // let pluginDirectives = Directives\n        const toRemove = options && options.remove ? options.remove : null;\n        if (toRemove && Array.isArray(toRemove)) {\n            pluginComponents = removeKeysFromObject(Components, toRemove);\n            // pluginDirectives = removeKeysFromObject(Directives, toRemove)\n        }\n        for (const plugin in pluginComponents) {\n            app.component(plugin, Components[plugin]);\n        }\n        // for (const directive in pluginDirectives) {\n        //   app.directive(directive, Directives[directive])\n        // }\n        app.directive('c-placeholder', vcplaceholder);\n        app.directive('c-popover', vcpopover);\n        app.directive('c-tooltip', vctooltip);\n    },\n};\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@coreui/vue/dist/index.es.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _coreui_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @coreui/vue */ \"./node_modules/@coreui/vue/dist/index.es.js\");\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  components: {\n    CModal: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CModal,\n    CModalHeader: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CModalHeader,\n    CModalTitle: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CModalTitle,\n    CModalFooter: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CModalFooter,\n    CModalBody: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CModalBody,\n    CButton: _coreui_vue__WEBPACK_IMPORTED_MODULE_0__.CButton\n  },\n  props: {\n    visible: false,\n    title: String,\n    titleClose: String\n  },\n  emits: [\"closeModal\"]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vcmVzb3VyY2VzL3Z1ZS9jb21wb25lbnRzL0Rhc2hib2FyZC9DdXN0b21Nb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFpQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWU7RUFDWE0sVUFBVSxFQUFFO0lBQ1JOLE1BQU0sRUFBTkEsK0NBRFE7SUFFUkMsWUFBWSxFQUFaQSxxREFGUTtJQUdSQyxXQUFXLEVBQVhBLG9EQUhRO0lBSVJDLFlBQVksRUFBWkEscURBSlE7SUFLUkUsVUFBVSxFQUFWQSxtREFMUTtJQU1SRCxPQUFPLEVBQVBBLGdEQUFPQTtFQU5DLENBREQ7RUFTWEcsS0FBSyxFQUFFO0lBQ0hDLE9BQU8sRUFBRSxLQUROO0lBRUhDLEtBQUssRUFBRUMsTUFGSjtJQUdIQyxVQUFVLEVBQUVEO0VBSFQsQ0FUSTtFQWNYRSxLQUFLLEVBQUUsQ0FBQyxZQUFEO0FBZEksQ0FBZiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy92dWUvY29tcG9uZW50cy9EYXNoYm9hcmQvQ3VzdG9tTW9kYWwudnVlPzI3YTAiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxyXG4gICAgPENNb2RhbCA6dmlzaWJsZT1cInZpc2libGVcIiBAY2xvc2U9XCIkZW1pdCgnY2xvc2VNb2RhbCcpXCI+XHJcbiAgICAgICAgPENNb2RhbEhlYWRlcj5cclxuICAgICAgICAgICAgPENNb2RhbFRpdGxlPnt7IHRpdGxlIH19PC9DTW9kYWxUaXRsZT5cclxuICAgICAgICA8L0NNb2RhbEhlYWRlcj5cclxuICAgICAgICA8Q01vZGFsQm9keT5cclxuICAgICAgICAgICAgPHNsb3QgLz5cclxuICAgICAgICA8L0NNb2RhbEJvZHk+XHJcbiAgICAgICAgPENNb2RhbEZvb3Rlcj5cclxuICAgICAgICAgICAgPENCdXR0b24gY29sb3I9XCJkYW5nZXJcIiBAY2xpY2s9XCIkZW1pdCgnY2xvc2VNb2RhbCcpXCI+XHJcbiAgICAgICAgICAgICAgICB7e3RpdGxlQ2xvc2V9fVxyXG4gICAgICAgICAgICA8L0NCdXR0b24+XHJcbiAgICAgICAgPC9DTW9kYWxGb290ZXI+XHJcbiAgICA8L0NNb2RhbD5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbmltcG9ydCB7IENNb2RhbCB9IGZyb20gXCJAY29yZXVpL3Z1ZVwiO1xyXG5pbXBvcnQgeyBDTW9kYWxIZWFkZXIgfSBmcm9tIFwiQGNvcmV1aS92dWVcIjtcclxuaW1wb3J0IHsgQ01vZGFsVGl0bGUgfSBmcm9tIFwiQGNvcmV1aS92dWVcIjtcclxuaW1wb3J0IHsgQ01vZGFsRm9vdGVyIH0gZnJvbSBcIkBjb3JldWkvdnVlXCI7XHJcbmltcG9ydCB7IENCdXR0b24gfSBmcm9tIFwiQGNvcmV1aS92dWVcIjtcclxuaW1wb3J0IHsgQ01vZGFsQm9keSB9IGZyb20gXCJAY29yZXVpL3Z1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgQ01vZGFsLFxyXG4gICAgICAgIENNb2RhbEhlYWRlcixcclxuICAgICAgICBDTW9kYWxUaXRsZSxcclxuICAgICAgICBDTW9kYWxGb290ZXIsXHJcbiAgICAgICAgQ01vZGFsQm9keSxcclxuICAgICAgICBDQnV0dG9uLFxyXG4gICAgfSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgdGl0bGU6IFN0cmluZyxcclxuICAgICAgICB0aXRsZUNsb3NlOiBTdHJpbmcsXHJcbiAgICB9LFxyXG4gICAgZW1pdHM6IFtcImNsb3NlTW9kYWxcIl0sXHJcbn07XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPjwvc3R5bGU+XHJcbiJdLCJuYW1lcyI6WyJDTW9kYWwiLCJDTW9kYWxIZWFkZXIiLCJDTW9kYWxUaXRsZSIsIkNNb2RhbEZvb3RlciIsIkNCdXR0b24iLCJDTW9kYWxCb2R5IiwiY29tcG9uZW50cyIsInByb3BzIiwidmlzaWJsZSIsInRpdGxlIiwiU3RyaW5nIiwidGl0bGVDbG9zZSIsImVtaXRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e":
/*!********************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": () => (/* binding */ render)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n\nfunction render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_CModalTitle = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CModalTitle\");\n\n  var _component_CModalHeader = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CModalHeader\");\n\n  var _component_CModalBody = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CModalBody\");\n\n  var _component_CButton = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CButton\");\n\n  var _component_CModalFooter = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CModalFooter\");\n\n  var _component_CModal = (0,vue__WEBPACK_IMPORTED_MODULE_0__.resolveComponent)(\"CModal\");\n\n  return (0,vue__WEBPACK_IMPORTED_MODULE_0__.openBlock)(), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createBlock)(_component_CModal, {\n    visible: $props.visible,\n    onClose: _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.$emit('closeModal');\n    })\n  }, {\n    \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n      return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_CModalHeader, null, {\n        \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n          return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_CModalTitle, null, {\n            \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n              return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.title), 1\n              /* TEXT */\n              )];\n            }),\n            _: 1\n            /* STABLE */\n\n          })];\n        }),\n        _: 1\n        /* STABLE */\n\n      }), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_CModalBody, null, {\n        \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n          return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.renderSlot)(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n        /* FORWARDED */\n\n      }), (0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_CModalFooter, null, {\n        \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n          return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createVNode)(_component_CButton, {\n            color: \"danger\",\n            onClick: _cache[0] || (_cache[0] = function ($event) {\n              return _ctx.$emit('closeModal');\n            })\n          }, {\n            \"default\": (0,vue__WEBPACK_IMPORTED_MODULE_0__.withCtx)(function () {\n              return [(0,vue__WEBPACK_IMPORTED_MODULE_0__.createTextVNode)((0,vue__WEBPACK_IMPORTED_MODULE_0__.toDisplayString)($props.titleClose), 1\n              /* TEXT */\n              )];\n            }),\n            _: 1\n            /* STABLE */\n\n          })];\n        }),\n        _: 1\n        /* STABLE */\n\n      })];\n    }),\n    _: 3\n    /* FORWARDED */\n\n  }, 8\n  /* PROPS */\n  , [\"visible\"]);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01LnVzZVswXSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9kaXN0L2luZGV4LmpzPz9ydWxlU2V0WzBdLnVzZVswXSEuL3Jlc291cmNlcy92dWUvY29tcG9uZW50cy9EYXNoYm9hcmQvQ3VzdG9tTW9kYWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTlkN2FjNjJlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkRBQ0lBLGdEQUFBQSxDQVlTQyxpQkFaVCxFQVlTO0lBWkFDLE9BQU8sRUFBRUMsY0FZVDtJQVptQkMsT0FBSztNQUFBLE9BQUVDLFdBQUssWUFBTCxDQUFGO0lBQUE7RUFZeEIsQ0FaVDs0REFDSTtNQUFBLE9BRWUsQ0FGZkMsZ0RBQUFBLENBRWVDLHVCQUZmLEVBRWUsSUFGZixFQUVlO2dFQURYO1VBQUEsT0FBc0MsQ0FBdENELGdEQUFBQSxDQUFzQ0Usc0JBQXRDLEVBQXNDLElBQXRDLEVBQXNDO29FQUF6QjtjQUFBLE9BQVcsMkdBQVJMLGVBQUs7Y0FBQTtlQUFHLENBQVg7WUFBQSxFQUF5Qjs7OztVQUFBLENBQXRDLENBQXNDLENBQXRDO1FBQUEsRUFDVzs7OztNQUFBLENBRmYsQ0FFZSxFQUNmRyxnREFBQUEsQ0FFYUcscUJBRmIsRUFFYSxJQUZiLEVBRWE7Z0VBRFQ7VUFBQSxPQUFRLENBQVJDLCtDQUFBQSxDQUFRTCxXQUFSLEVBQVEsU0FBUixDQUFRLENBQVI7UUFBQSxFQUNTOzs7O01BQUEsQ0FGYixDQURlLEVBSWZDLGdEQUFBQSxDQUllSyx1QkFKZixFQUllLElBSmYsRUFJZTtnRUFIWDtVQUFBLE9BRVUsQ0FGVkwsZ0RBQUFBLENBRVVNLGtCQUZWLEVBRVU7WUFGREMsS0FBSyxFQUFDLFFBRUw7WUFGZUMsT0FBSztjQUFBLE9BQUVULFdBQUssWUFBTCxDQUFGO1lBQUE7VUFFcEIsQ0FGVjtvRUFDSTtjQUFBLE9BQWMsMkdBQVpGLG9CQUFVO2NBQUE7ZUFBRSxDQUFkO1lBQUE7Ozs7V0FESixDQUVVLENBRlY7UUFBQSxFQUdXOzs7O01BQUEsQ0FKZixDQUplLENBRmY7SUFBQTs7OztHQURKOztFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3Z1ZS9jb21wb25lbnRzL0Rhc2hib2FyZC9DdXN0b21Nb2RhbC52dWU/MjdhMCJdLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XHJcbiAgICA8Q01vZGFsIDp2aXNpYmxlPVwidmlzaWJsZVwiIEBjbG9zZT1cIiRlbWl0KCdjbG9zZU1vZGFsJylcIj5cclxuICAgICAgICA8Q01vZGFsSGVhZGVyPlxyXG4gICAgICAgICAgICA8Q01vZGFsVGl0bGU+e3sgdGl0bGUgfX08L0NNb2RhbFRpdGxlPlxyXG4gICAgICAgIDwvQ01vZGFsSGVhZGVyPlxyXG4gICAgICAgIDxDTW9kYWxCb2R5PlxyXG4gICAgICAgICAgICA8c2xvdCAvPlxyXG4gICAgICAgIDwvQ01vZGFsQm9keT5cclxuICAgICAgICA8Q01vZGFsRm9vdGVyPlxyXG4gICAgICAgICAgICA8Q0J1dHRvbiBjb2xvcj1cImRhbmdlclwiIEBjbGljaz1cIiRlbWl0KCdjbG9zZU1vZGFsJylcIj5cclxuICAgICAgICAgICAgICAgIHt7dGl0bGVDbG9zZX19XHJcbiAgICAgICAgICAgIDwvQ0J1dHRvbj5cclxuICAgICAgICA8L0NNb2RhbEZvb3Rlcj5cclxuICAgIDwvQ01vZGFsPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IHsgQ01vZGFsIH0gZnJvbSBcIkBjb3JldWkvdnVlXCI7XHJcbmltcG9ydCB7IENNb2RhbEhlYWRlciB9IGZyb20gXCJAY29yZXVpL3Z1ZVwiO1xyXG5pbXBvcnQgeyBDTW9kYWxUaXRsZSB9IGZyb20gXCJAY29yZXVpL3Z1ZVwiO1xyXG5pbXBvcnQgeyBDTW9kYWxGb290ZXIgfSBmcm9tIFwiQGNvcmV1aS92dWVcIjtcclxuaW1wb3J0IHsgQ0J1dHRvbiB9IGZyb20gXCJAY29yZXVpL3Z1ZVwiO1xyXG5pbXBvcnQgeyBDTW9kYWxCb2R5IH0gZnJvbSBcIkBjb3JldWkvdnVlXCI7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBDTW9kYWwsXHJcbiAgICAgICAgQ01vZGFsSGVhZGVyLFxyXG4gICAgICAgIENNb2RhbFRpdGxlLFxyXG4gICAgICAgIENNb2RhbEZvb3RlcixcclxuICAgICAgICBDTW9kYWxCb2R5LFxyXG4gICAgICAgIENCdXR0b24sXHJcbiAgICB9LFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICB0aXRsZTogU3RyaW5nLFxyXG4gICAgICAgIHRpdGxlQ2xvc2U6IFN0cmluZyxcclxuICAgIH0sXHJcbiAgICBlbWl0czogW1wiY2xvc2VNb2RhbFwiXSxcclxufTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+PC9zdHlsZT5cclxuIl0sIm5hbWVzIjpbIl9jcmVhdGVCbG9jayIsIl9jb21wb25lbnRfQ01vZGFsIiwidmlzaWJsZSIsIiRwcm9wcyIsIm9uQ2xvc2UiLCJfY3R4IiwiX2NyZWF0ZVZOb2RlIiwiX2NvbXBvbmVudF9DTW9kYWxIZWFkZXIiLCJfY29tcG9uZW50X0NNb2RhbFRpdGxlIiwiX2NvbXBvbmVudF9DTW9kYWxCb2R5IiwiX3JlbmRlclNsb3QiLCJfY29tcG9uZW50X0NNb2RhbEZvb3RlciIsIl9jb21wb25lbnRfQ0J1dHRvbiIsImNvbG9yIiwib25DbGljayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e\n");

/***/ }),

/***/ "./resources/vue/components/Dashboard/CustomModal.vue":
/*!************************************************************!*\
  !*** ./resources/vue/components/Dashboard/CustomModal.vue ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CustomModal_vue_vue_type_template_id_9d7ac62e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CustomModal.vue?vue&type=template&id=9d7ac62e */ \"./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e\");\n/* harmony import */ var _CustomModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CustomModal.vue?vue&type=script&lang=js */ \"./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js\");\n/* harmony import */ var C_laragon_www_ine_recognizer_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/vue-loader/dist/exportHelper.js */ \"./node_modules/vue-loader/dist/exportHelper.js\");\n\n\n\n\n;\nconst __exports__ = /*#__PURE__*/(0,C_laragon_www_ine_recognizer_node_modules_vue_loader_dist_exportHelper_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(_CustomModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], [['render',_CustomModal_vue_vue_type_template_id_9d7ac62e__WEBPACK_IMPORTED_MODULE_0__.render],['__file',\"resources/vue/components/Dashboard/CustomModal.vue\"]])\n/* hot reload */\nif (false) {}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__exports__);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdnVlL2NvbXBvbmVudHMvRGFzaGJvYXJkL0N1c3RvbU1vZGFsLnZ1ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdFO0FBQ1Y7QUFDTDs7QUFFekQsQ0FBK0c7QUFDL0csaUNBQWlDLHFIQUFlLENBQUMsZ0ZBQU0sYUFBYSxrRkFBTTtBQUMxRTtBQUNBLElBQUksS0FBVSxFQUFFLEVBY2Y7OztBQUdELGlFQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL3Z1ZS9jb21wb25lbnRzL0Rhc2hib2FyZC9DdXN0b21Nb2RhbC52dWU/OGE5OCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIgfSBmcm9tIFwiLi9DdXN0b21Nb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9OWQ3YWM2MmVcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DdXN0b21Nb2RhbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anNcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ3VzdG9tTW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCJcblxuaW1wb3J0IGV4cG9ydENvbXBvbmVudCBmcm9tIFwiQzpcXFxcbGFyYWdvblxcXFx3d3dcXFxcaW5lLXJlY29nbml6ZXJcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1sb2FkZXJcXFxcZGlzdFxcXFxleHBvcnRIZWxwZXIuanNcIlxuY29uc3QgX19leHBvcnRzX18gPSAvKiNfX1BVUkVfXyovZXhwb3J0Q29tcG9uZW50KHNjcmlwdCwgW1sncmVuZGVyJyxyZW5kZXJdLFsnX19maWxlJyxcInJlc291cmNlcy92dWUvY29tcG9uZW50cy9EYXNoYm9hcmQvQ3VzdG9tTW9kYWwudnVlXCJdXSlcbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIF9fZXhwb3J0c19fLl9faG1ySWQgPSBcIjlkN2FjNjJlXCJcbiAgY29uc3QgYXBpID0gX19WVUVfSE1SX1JVTlRJTUVfX1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghYXBpLmNyZWF0ZVJlY29yZCgnOWQ3YWM2MmUnLCBfX2V4cG9ydHNfXykpIHtcbiAgICBjb25zb2xlLmxvZygncmVsb2FkJylcbiAgICBhcGkucmVsb2FkKCc5ZDdhYzYyZScsIF9fZXhwb3J0c19fKVxuICB9XG4gIFxuICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQ3VzdG9tTW9kYWwudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTlkN2FjNjJlXCIsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygncmUtcmVuZGVyJylcbiAgICBhcGkucmVyZW5kZXIoJzlkN2FjNjJlJywgcmVuZGVyKVxuICB9KVxuXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgX19leHBvcnRzX18iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/vue/components/Dashboard/CustomModal.vue\n");

/***/ }),

/***/ "./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js":
/*!************************************************************************************!*\
  !*** ./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CustomModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CustomModal_vue_vue_type_script_lang_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./CustomModal.vue?vue&type=script&lang=js */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js\");\n //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvdnVlL2NvbXBvbmVudHMvRGFzaGJvYXJkL0N1c3RvbU1vZGFsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzTiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy92dWUvY29tcG9uZW50cy9EYXNoYm9hcmQvQ3VzdG9tTW9kYWwudnVlPzE2ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCB9IGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vQ3VzdG9tTW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCI7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTUudXNlWzBdIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2Rpc3QvaW5kZXguanM/P3J1bGVTZXRbMF0udXNlWzBdIS4vQ3VzdG9tTW9kYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzXCIiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/vue/components/Dashboard/CustomModal.vue?vue&type=script&lang=js\n");

/***/ }),

/***/ "./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e":
/*!******************************************************************************************!*\
  !*** ./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => (/* reexport safe */ _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CustomModal_vue_vue_type_template_id_9d7ac62e__WEBPACK_IMPORTED_MODULE_0__.render)
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_5_use_0_node_modules_vue_loader_dist_templateLoader_js_ruleSet_1_rules_2_node_modules_vue_loader_dist_index_js_ruleSet_0_use_0_CustomModal_vue_vue_type_template_id_9d7ac62e__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./CustomModal.vue?vue&type=template&id=9d7ac62e */ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./resources/vue/components/Dashboard/CustomModal.vue?vue&type=template&id=9d7ac62e");


/***/ })

}]);